# Data Storytelling {#sec-storytelling}

```{r}
#| echo: false
library(knitr)
library(kableExtra)
library(fontawesome)
```

By the end of this chapter you should gain the following knowledge and practical skills.

::: {.callout-note}

## Knowledge

- [x] Appreciate the main characteristics of data-driven stories.
- [x] Identify how visual and rhetorical devices are used to communicate with data.

:::


::: {.callout-note}

## Practical skills

- [x] Create ggplot2 graphics with non-standard annotations.
:::

## Introduction

It is now taken-for-granted that we live in an evidence-based society in which data are deeply embedded in most domains and in how we approach the world’s problems. This recognition has coincided with, amongst other things, the open source movement which has freed up access to, and technologies for working with, data. The response to Covid-19 is an excellent example. Enter [Covid19 github](https://www.google.com/search?q=covid19+github&rlz=1C5CHFA_enGB632GB632&oq=covid19+&aqs=chrome.0.69i59l2j69i57j0l2j69i61l3.3040j0j7&sourceid=chrome&ie=UTF-8) into a search and you’ll be confronted with hundreds of code repositories demonstrating how data related to the pandemic can be collected, processed and analysed.

This is exciting and feels very democratic. But there is a responsibility amongst those constructing and sharing evidence-based arguments to do so with integrity; navigating the difficult tension between communicating a clear message -- necessarily reducing some of the complexity -- at the same time as acknowledging uncertainty. In Information Visualization the role of narrative and storytelling when working and communicating with data is much discussed [e.g. @henryriche_data_2018]. Importantly, this work recognises that there is no single, optimal visualization design that exposes the true structure or story in a dataset. Instead, that careful design decisions must be made in light of data, audience and intended purpose.

In this chapter we will review some of this literature with a special focus on approaches to communicating reported cases, hospitalisations and deaths numbers around the Covid-19 pandemic.


## Concepts

### Data-driven storytelling

In earlier chapters of the book (e.g. @sec-visual) we identified and explored some common characteristics of effective data graphics. @roth_cartographic_2020 enumerates 10 such characteristics specialised to data storytelling.  Particularly important for visualization design is that data graphics are:

<!-- Although  reasonably generalisable, those characteristics benefit from being re-interpreted when designing for *communication*.  -->


<!-- we made the case that visual data analysis is about encoding data to visuals in a way that follows established guidelines known to work well for particular tasks. This might imply there is some optimal visualization design that can be achieved. Clearly, no such optimal solution exists, especially so when designing graphics for *communication* [@henryriche_data_2018]. However, we can consider some of the common characteristics of effective visual data stories. @roth_cartographic_2020 identifies 10 such characteristics, but particularly important are that visual design stories are: -->

* *Designed*: The analyst makes very deliberate decisions in light of audience and purpose. The goal of visual storytelling is not just to *show* but also to *explain*.

* *Partial*: Essential information is prioritised and made salient, with abstraction and brevity preferred over complexity and completeness.

* *Intuitive*: Visual narratives take advantage of our natural tendency to communicate via metaphor and story, with a clear entry point and clear progression.

* *Compelling*: Visual stories often capture attention through an array of graphical devices -- sequence, animation and interaction. They generate an aesthetic response.

* *Relatable and situated*: Visual stories promote empathy, using devices that place the audience in the story setting. They are usually constructed from somewhere -- according to a particular position.

* *Political*: Visual data stories promote with clarity particular voices, interpretations or positions.

In the sections that follow, we review some key Covid-19 visualizations and reflect on how they implement these sorts of storytelling devices.

### Designed and partial

Perhaps the most high-profile examples through the Covid-19 pandemic of data graphics specialised to communication were those produced by the Financial Times [@ft_coronavirus_2020]. @fig-ft-vis displays the most ubiquitous, the Financial Times's trajectory tracker. Along the y-axis, cumulative numbers of deaths, and in other charts cases, are compared between countries with a log-scale. Along the x-axis is number of days that have elapsed since some threshold number of cases or deaths were recorded in each country and the y-axis counts of deaths presented on a log scale.


```{r}
#| label: fig-ft-vis
#| out.width: 95%
#| fig-cap: "[John Burn-Murdoch](https://www.ft.com/john-burn-murdoch)'s international comparison of deaths, as it appeared on [twitter](https://twitter.com/jburnmurdoch/status/1241820210455285760). **TO DO: Update with own implementation due to Copyright reasons.**"
#| echo: false
#| eval: true

include_graphics("figs/08/jbm-logchart.jpeg", error = FALSE)
include_graphics("figs/08/cum_deaths_full", error = FALSE)
```

We can evaluate the graphic using some of the principles introduced in @sec-visual. In its use of position on an aligned scale to encode death counts and colour hue to differentiate countries, the graphic's visual encoding exploits our cognitive abilities. Comparison is also supportted by superimposition [@gleicher_visual_2011] -- lines for each country represented on the same coordinate space.

On @roth_cartographic_2020's characteristics of visual storytelling, the graphic is *designed* with a very deliberate purpose:

 1. Between country comparison: *Are countries on the same course?*
 2. Comparison against milestone: *How many days does it take a certain county to reach a given number of deaths?*


It is possible to see each of these goals informing the graphic. Comparison between countries is most obviously supported by the use of a log-scale. This removes the dominant, hockey-stick type pattern in standard scales due to the exponential doubling and instead allows slopes (*growth rates*) to be compared directly. Log scales are, though, not so familiar to the average reader. Useful annotations are therefore provided identifying slope gradients that correspond to different growth rates, again narrowing on the essential goal of between country comparison in growth rates. In other design variants there are also approaches to dealing with daily volatility -- a smoothing function based on [splines](https://en.wikipedia.org/wiki/Smoothing_spline). Exposing full details of smoothing functions and their parameterisation is probably a level of complexity beyond the average reader, and so these sorts of features are incorporated discreetly.

::: {.callout-note icon="true"}
You might be interested to know that most [Financial Times graphics](https://www.ft.com/graphics) are built using ggplot2. A presentation in which John Burn-Mudoch makes the case for ggplot2 for Data Journalism [from this link](https://johnburnmurdoch.github.io/slides/r-ggplot/#/).
:::

An interesting design alternative that supports between country comparison is [Aatish Bhatia](https://aatishb.com)'s [Covid Trends](https://aatishb.com/covidtrends/) chart (@fig-covid-trends). A double log scale is used and growth rates in new cases are presented on the y-axis with total case numbers, rather than time elapsed, plotted along the x-axis. Whilst the introduction of a double log scale might be judged to increase difficulty, actually this design narrows or simplifies the reader's visual judgement to looking at the thing that we are most interested in: comparison of country growth rates against the two day doubling (annotated with the diagonal). The chart is also accompanied with an excellent [explanatory video](https://www.hippocraticpost.com/covid-19-update/how-to-tell-if-were-beating-covid-19/), in which many of the characteristics of visual data stories enumerated by @roth_cartographic_2020 can be identified.


```{r}
#| label: fig-covid-trends
#| out.width: 95%
#| fig-cap: "[Aatish Bhatia](https://aatishb.com)'s [Covid Trends](https://aatishb.com/covidtrends/) chart. [Source](https://github.com/aatishb/covidtrends#credits). **TO DO: Update with own implementation (Copyright).**"
#| echo: false
#| eval: true

include_graphics("figs/08/covid-trends.png", error = FALSE)
include_graphics("figs/08/covid_logs.png", error = FALSE)
```

### Intuitive and compelling

According to @roth_cartographic_2020, visual data stories are often explanatory.  They make *compelling* use of graphical and rhetorical devices to support understanding. This is especially important in data-driven storytelling as it often involves concepts that are initially quite challenging. In @fig-lambrechts-connected is a static image from a [data story written by Flourish](https://flourish.studio/2021/04/06/masters-connected-scatter-maarten-lambrechts/) based on design work by [Marteen Lambrechts](https://twitter.com/maartenzam/status/1319622943526293505). The data story is essentially a design exposition [@beecham_design_2020; @wood_design_2018], guiding readers from the familiar to the unfamiliar. First a standard time series chart of hospitalisations and deaths is presented. Deficiencies in this layout are explained before progressively introducing the transformations involved to generate the preferred graphic, a [connected scatterplot](http://steveharoz.com/research/connected_scatterplot/). Ordering the story in this way explains design decisions and the trade-offs associated with visual design from a familiar starting point and helps justify new, sometimes unfamiliar encodings. Thinking about @roth_cartographic_2020's characteristics of visual storytelling, formulating a design story in this way helps build *intuition* -- there is a clear entry point and clear progression.

```{r}
#| label: fig-lambrechts-connected
#| out.width: 95%
#| fig-cap: "Static image from a data story written by [Flourish](https://flourish.studio/2021/04/06/masters-connected-scatter-maarten-lambrechts/) demonstrating how connected scatterplots can be used to analyse changes in hospitalisations and deaths. **TO DO: Update with own implementation (Copyright).**"
#| echo: false
#| eval: true

include_graphics("figs/08/lambrechts-connected-flourish.png", error = FALSE)
```

::: {.callout-note icon="true"}
For a more involved design exposition of connected scatterplots, see [Danny Dorling](http://www.dannydorling.org)'s work on [slowdown](https://twitter.com/dannydorling/status/1245010922592231424). Note that Danny also encodes time using line width. This is an important addition, along with colour as demonstrated with [timecurves](https://aviz.fr/~bbach/timecurves/).

For an example of guided design exposition for explaining complex designs in [analysis of Covid-19 cases data](https://twitter.com/rJBeecham/status/1317019462453895168), also see @beecham_on_2021, which develops ways of showing simultaneously absolute and relative change in cases, with geographic context.
:::

@fig-ft-anim, again from Financial Times, is another example of how animation can be used to build *intuition*. The main objective is to demonstrate how different 2020 is in terms of admissions to intensive care compared to a normal year. This was in response to claims that Covid-19 behaves much like seasonal flu; to this extent the graphic is also quite *political*. Each year from 2013-14 is added to the chart and the y-axis rescaled to reflect the new numbers. This helps build expectation around normal variability in a similar way to the [hypothetical outcome plots](https://medium.com/hci-design-at-uw/hypothetical-outcomes-plots-experiencing-the-uncertain-b9ea60d7c740) [@hullman_hypothetical_2015] covered in the previous chapter.  The expectation is then roundly debunked by the introduction of the 2020-21 line in red, with animated rescaling of the y-axis used for further emphasis.


```{r}
#| label: fig-ft-anim
#| out.width: 95%
#| fig-cap: "[John Burn-Murdoch](https://www.ft.com/john-burn-murdoch)'s animated rescaling [via twitter](https://twitter.com/jburnmurdoch/status/1347200811303055364) demonstrating how different in terms of intensive care admissions 2020/21 is to a standard flu season.**TO DO: Update with own implementation (Copyright).**"
#| echo: false
#| eval: true

include_graphics("figs/08/jbm-anim.gif", error = FALSE)
```

### Political

@fig-ft-vaccine presents a final example of [visual narrative](https://twitter.com/jburnmurdoch/status/1382013080448724994) from Financial Times with an obviously political purpose. The graphic was created in response to claims from the UK's Prime Minister that it is largely restrictions rather than vaccination that has reduced infection rates in the country. Interesting here is how annotation and *visual saliency* is used to direct how the graphic is perceived. If the graphic was only annotated  with points in time when lockdown and vaccination was initiated, it would invite us to make judgements about the effects of these two events on infectious rates. That the graphic makes highly salient annotations labelling the (unmeasurable) effect of *lockdown* and *vaccine* is an interesting addition. There is little room for ambiguity.

This sort of presentation, labelling the chart with an unmeasurable effect, may risk graphical integrity (see @tufte_visual_1983's [lie factor](https://infovis-wiki.net/wiki/Lie_Factor)). In a keynote given at IEEE VIS 2020 [@burnmurdoch_beliv_2020], John Burn Murdoch, who created this and the other Financial Times graphics, reflected on his experiences generating data stories early in the pandemic --  that the way in which the FT's data graphics were interpreted, and misinterpreted, varied depending on the prior expectations and political beliefs of those consuming them. The chart labelling in this case might have been added to signal more directly the evidence-based argument that was being made -- to amplify the conclusion believed to be supported by the data.  



Clearly all data analysis is heavily informed by the values, prejudices, motivations and incentives of those undertaking them. As demonstrated by @roth_cartographic_2020's characteristics of data storytelling, these individual factors are necessary to communicate effectively. An interesting question, then, is around how integrity and trust is designed into a data analysis. Perhaps in the case of the Financial Times data journalists, this trust is established over time, through a portfolio of data analysis work that is considered, communicated transparently and with humility.

```{r}
#| label: fig-ft-vaccine
#| out.width: 95%
#| fig-cap: "[John Burn-Murdoch](https://www.ft.com/john-burn-murdoch)'s analysis [via twitter](https://twitter.com/jburnmurdoch/status/1382013080448724994) evaluating the role of lockdown and the vaccine. **TO DO: Update with own implementation (Copyright).**"
#| echo: false
#| eval: true

include_graphics("figs/08/jbm-vaccine.jpeg", error = FALSE)
```


::: {.callout-note icon="true"}
The annotations in @fig-ft-vaccine have heavy saliency thanks to the parsimonious use of axis titles, marks and legends, and other non-data-ink [@tufte_visual_1983].
:::



## Techniques

The technical element demonstrates how to design plots deliberatively with annotations in ggplot2. We will recreate a glyphmap type graphic that originally appeared in [The Washington Post](https://www.washingtonpost.com/nation/2020/05/24/coronavirus-rural-america-outbreaks/?arc404=true) to tell a story of growth in Covid-19 cases by US county. The graphic is presented in @fig-wp. Each US county is represented as a line encoded by daily growth rates in new cases between 3rd May and 26th May 2020.  Lines are positioned at the geographic centre of each county. 

```{r}
#| label: fig-wp
#| out.width: 100%
#| fig-cap: "Glyphmap design displaying growth in COVID-19 cases by US county, based on the design by Thebault and Hauslohner, original in [The Washington Post](https://www.washingtonpost.com/nation/2020/05/24/coronavirus-rural-america-outbreaks/?arc404=true)."
#| echo: false
#| eval: true

include_graphics("figs/08/wp.png", error = FALSE)
```

@fig-wp is certainly data dense. Without careful decisions on which aspects to emphasise it would be quite unreadable. Line thickness is varied according to relative infection rates (cumulative cases/population size) and growth rate is double encoded with colour value -- darker and steeper lines for higher growth rates. Even with these additions it is challenging to discern trajectories for every county, but instead a typical model or expectation of these trajectories can be learnt from visually scanning the graphic. That there is spatial autocorrelation in trajectories means an overall pattern of exposure can be inferred, before eyes are drawn to exceptions. Initially these are towards the extreme end: tall, steep, dark and thick lines suggesting rapid growth rates and high case rates. Secondary patterns can also be discerned, for example thick and mid-dark lines surrounded by lines that are generally lighter and thinner: counties that appear locally exceptional in having comparatively high growth and exposure rates.

The design is impressive, and there is an obvious benefit to showing growth rates in their spatial position. However, we are not looking at absolute numbers here. The counties that are most salient are not those with the largest case counts. Rather, they have experienced rapid growth since the number of cases reported on 3rd May. So the graphic is most certainly *partial* and *designed* to suit a particular purpose. A slight adjustment in the implementation in @fig-wp was to only show growth rates for counties that had non-negligible case counts on 3rd May ($\geq20$ cases). 

Without the careful integration of annotations and non-standard legends, @fig-wp would not be so successful.  The aim of this technical section is to demonstrate an approach to generating heavily designed annotations -- custom legends, which are often necessary when communicating with maps. For more extensive demonstration of how charts can be annotated and refined, do see the Further Reading section of this chapter.

### Import

* Download the [08-template.qmd](./files/08-template.qmd) file and save it to your `vis4sds` project.
* Open your `vis4sds` project in RStudio and load the template file by clicking `File` > `Open File ...` > `08-template.qmd`.

The template file lists the required packages -- `tidyverse` and `sf`. The data were collected using [Kieran Healy](https://kieranhealy.org/)'s [`covdata`](https://kjhealy.github.io/covdata/) package [@healy_covdata_2020], attributing  the [county-level cumulative cases dataset](https://github.com/nytimes/covid-19-data) released and maintained by data journalists at The New York Times [see @nyt_coronavirus_2021].

The template provides access to a version of this dataset that is 'staged' for charting. For this cases are filtered on the dates covered by the Washington Post graphic (3rd to 25th May); counties whose daily case counts were $\geq20$ cases on 3rd May are identified; calculated daily growth rates are anchored to case counts on 3rd May; calculated 'end' growth rates and daily counts for each county are calculated (those recorded on 25th May); and finally a binned growth rate variable identifying counties with daily case counts on 25rd May that were $\leq2\times$, $\geq2\times$, $\geq4\times$,  $\geq7\times$ the daily case counts measured on 3rd May. Also there is a `state_boundaries` dataset to download, which contains `geometry` data for each US state, collected from [US Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html) as well as coordinate variables describing the geographic centroid of each state. The [Albers Equal Area](https://en.wikipedia.org/wiki/Albers_projection) projection is used.

### Plot trajectories

```{r}
#| label: fig-wp-basic
#| out.width: 100%
#| fig-cap: "Glyphmap design displaying growth in COVID-19 cases by US county, without legend and annotations."
#| echo: false
#| eval: true

include_graphics("figs/08/wp-basic.png", error = FALSE)
```

The main graphic is reasonably straightforward to construct. Different from many of the data graphics in earlier chapters, the way in which growth lines are generated is somewhat low-level. Remembering that lines are initially positioned in x- and y- on their county centroid, we generate from the data positions in geographic space for each observation -- growth rates recorded by day since 3rd May 2020.

The code:

```{r}
#| echo: true
#| eval: false
county_data |> 
  ggplot() +
  geom_sf(
    data=state_boundaries, 
    fill="#eeeeee", colour="#ffffff", linewidth=0.4
  )+ 
  coord_sf(crs = 5070, datum=NA, clip="off") +
  geom_point(
    data=.%>% filter(date=="2020-05-03"), 
    aes(x=x, y=y, size=case_rate)
  ) +
  # Plot case data.
  geom_path(
    aes(x=x+((day_num-1)*6000), y=y+((growth_rate-1)*50000), 
        group=fips, linewidth=case_rate, alpha=binned_growth_rate, colour=binned_growth_rate),
    lineend="round"
  ) +
  scale_colour_manual(values=c("#fa9fb5", "#dd3497", "#7a0177", "#49006a")) +
  scale_size(range=c(.1,1.5))+
  scale_linewidth(range=c(.3,3))+
  scale_alpha_ordinal(range=c(.2,1)) +
  guides(colour="none", size="none", alpha="none") +
  theme_void()
```

The plot specification:

1. *Data*: The main dataset -- the staged `county_data` file. Separately there is a `state_boundaries` file used to draw state boundaries and later label states. For the points drawn at the centroid of each US county (`geom_point()`), the data are filtered so that only a single day is represented (`filter(date=="2020-05-03")`).
2. *Encoding*: For `geom_point()`, x-position and y-position is mapped to county centroid (`x`,`y` variables in `county_data`), points are coloured according to `binned_growth_rate` using both `colour` and `alpha` and sized according to that county's `case_rate`. The same colour and size encoding is used for the lines (`geom_path()`). County lines are again anchored at county centroids but offset in `x` according to time elapsed (`day_num`) and in `y` according to `growth_rate`. The constants applied to `growth_rate` (5000) and `day_num` (6000), which control the space occupied by the lines, was arrived at manually through trial and error. Note that these numbers are large as they relate to geographic coordinate space. In order to draw separate lines for each county, we set the `group=` argument to the county identifier variable `fips`.
3. *Marks*: `geom_point()` for the start points centred on county centroids and `geom_path()` for the lines.
4. *Scale*: `scale_colour_manual()` for the binned growth rate colours; `scale_alpha()` for an ordinal transparency range -- the floor for this is 0.2 and not 0, otherwise counties with the smallest binned growth rates would not be visible; `scale_size()` and `scale_linewidth_size()` for varying the size of points and thickness of lines continuously according to case rate, the range was arrived at through trial and error.
5. *Setting*: We don't want the default legend to appear and so `guides()` turns these off; additionally `theme_void()` for removing default axes, gridlines etc.

### Add labels and annotations

The two-letter state boundaries, held in the `state_boundaries` file can be added in a `geom_text()` layer, positioned in `x` and `y` at state centroids. For obvious reasons this needs to appear *after* the first call to `geom_sf()`, which draws the filled state outlines:

```{r}
#| echo: true
#| eval: false

county_data |>
  ggplot()+
  geom_sf(data=state_boundaries, fill="#eeeeee", colour="#ffffff", linewidth=0.4)+
  geom_text(data=state_boundaries, aes(x=x,y=y,label=STUSPS), alpha=.8)+
  ...
  ...
  ...
```

For the counties annotated with accompanying growth rates we create a staged, filtered data frame containing only those counties and with just one row for each county. This is a little more tedious as we have to manually identify these in a `filter()`. Note that we filter on `date` first, so that only one row is returned for each county. Within the `mutate()` some manual abbreviations are made for state names and also the `end_rate` variable is rounded to whole numbers for better labelling.

```{r}
#| echo: true
#| eval: false
# Counties to annotate.
annotate <- county_data |>  
  filter(
    date=="2020-05-03",
    county==c("Huntingdon") & state=="Pennsylvania" |
    county==c("Lenawee") & state=="Michigan" |
    county==c("Crawford") & state=="Iowa" |
    county==c("Wapello") & state=="Iowa" |
    county==c("Lake") & state=="Tennessee" |
    county=="Texas" & state == c("Oklahoma") |
    county==c("Duplin") & state=="North Carolina" |
    county==c("Santa Cruz") & state=="Arizona"|
    county==c("Titus") & state=="Texas"|
    county==c("Yakima") & state=="Washington"
    ) |> 
  mutate(
    state_abbr=case_when(
      state=="Pennsylvania" ~ "Penn.",
      state=="Iowa" ~ "Iowa",
      state=="Tennessee" ~ "Tenn.",
      state=="Oklahoma" ~ "Okla.",
      state=="Texas" ~ "Texas",
      state=="North Carolina" ~ "N.C.",
      state=="Washington" ~ "Wash.",
      state=="Michigan" ~ "Mich.",
      state=="Arizona" ~ "Arizona",
      TRUE ~ ""),
    end_rate_round = round(end_rate,0)
  )
```

Plotting these is again quite straightforward with `geom_text()`. The `paste0()` function is used to build labels that display conty names (`county`) and then state abbreviations (`state_abbr`). These appear below each county and this is effected by offseting y-position. Additionally the counties are given a bold font by passing an argument to `fontface="bold"`. The same approach is used for the rate labels, but with an incremented y-position offset so that they don't overlap the county name labels.

```{r}
#| echo: true
#| eval: false
county_data |> 
  ggplot()+
  geom_sf(data=state_boundaries, fill="#eeeeee", colour="#ffffff", linewidth=0.4)+ 
  ...
  ...
  geom_text(
    data=annotate, 
    aes(x=x,y=y-20000,label=paste0(county,", ",state_abbr)), 
    size=3, fontface="bold"
    )+
  geom_text(
    data=annotate, 
    aes(x=x,y=y-65000,label=paste0(end_rate_round,"X more cases")), 
    size=2.5
    )+
  ...
  ...
  ...
```

### Build custom legend

Since @fig-wp is a non-standard data graphic coded in a more low-level way with `geom_segment()`, it is useful to accompany it with a more expressive legend. We therefore build our own legend from scratch, using the geographic space of the plot as our canvas.

::: {#fig-legends}

:::: {.columns}

::: {.column width="47%"}
![Growth rates](figs/08/wp-legend-growth.png){#fig-wp-growth-legend}
:::

::: {.column width="53%"}
![Case rates](figs/08/wp-legend-case.png){#fig-wp-case-legend}
:::

:::

Custom legends used to demonstrate growth and case rates.
:::

```{r}
#| label: fig-wp-growth-legend
#| out.width: 80%
#| fig-cap: "Legend demonstrating growth rates."
#| echo: false
#| eval: true
#| include: false

include_graphics("figs/08/wp-legend-growth.png", error = FALSE)
```

To support positioning of the legend we extract the spatial limits, or bounding box,  of our plot area -- the mainland US.


```{r}
#| echo: true
#| eval: false
# Bounding box for mainland US.
bbox <- st_bbox(state_boundaries)
width <- bbox$xmax-bbox$xmin
height <- bbox$ymax-bbox$ymin
```

We then create a dataset for the top right legend displaying the different categories of growth rate (@fig-wp-growth-legend). Counties filtered by their different growth rates were identified manually. As you will see shortly we use exactly the same *encoding* as the main graphic for the example legend lines, but rather than positioning these selected counties in their real geographic position, we override their x- and y- location so that the lines appear in a margin to the top right of the graphic. This is achieved in the `mutate()`, where we set x-position to start at the right quarter of the graphic (`bbox$xmax-.25*width`) and y-position to start slightly above the top of the graphic `bbox$ymax+.05*height`. `case_rate` is set to a constant as we don't want line width to vary and also a manually created `label` variable.

```{r}
#| echo: true
#| eval: false
# Legend : growth
legend_growth <- county_data |>
  filter(
    county=="Dubois" & state=="Indiana" |
    county=="Androscoggin" & state=="Maine" |
    county=="Fairfax" & state=="Virginia" |
    county=="Bledsoe" & state=="Tennessee"
  ) |>
  mutate(
    x=bbox$xmax-.25*width, y=bbox$ymax+.05*height,
    case_rate=.01,
    label=case_when(
      county == "Dubois" ~ "7x more cases than on May 3",
      county == "Androscoggin" ~ "4x",
      county == "Fairfax" ~ "2x",
      county == "Bledsoe" ~ "About the same as on May 3"
    )
  )
```



A separate dataset is also created for drawing the top left legend (@fig-wp-case-legend), showing different case rates relative to population size. In the `mutate()` we set x-position to start towards the left of the graphic (`bbox$xmax-.88*width`) and y-position to start slightly above the top of the graphic `bbox$ymax+.05*height`. We want to draw three lines corresponding to a low, medium and high growth rate and so `pivot_longer()` to duplicate the daily case data over rows. Each line needs to be drawn next to one another and this is achieved with the `offset_day` variable,  a multiple applied to the geographic `width` of US used later in the ggplot2 specification.

```{r}
#| echo: true
#| eval: false
# Legend : case
legend_case <- county_data |>
  filter(
    county == "Kings" & state=="California" ) |>
  mutate(
    x=bbox$xmax-.88*width,y=bbox$ymax+.05*height,
    binned_growth_rate=factor(binned_growth_rate)
  ) %>%
  select(x, y, day_num, growth_rate, binned_growth_rate, fips) |>
  mutate(
    low=.001, mid=.009, high=.015,
  ) |>
  pivot_longer(cols=c(low, mid, high), names_to="offset", values_to="offset_rate") |>
  mutate(
    offset_day= case_when(
      offset == "low" ~ 0,
      offset == "mid" ~ .04,
      offset == "high" ~ .08
    )
  )
```


### Compose graphic 

The code block below demonstrates how derived data for the legends are used in the ggplot2 specification. Exactly the same mappings are used in the legend as the main graphic, and so the call to `geom_path()` looks similar, except for the different use of x- and y- position. Labels for the legends are generated using `annotate()` and again positioned using location information contained in `bbox`.

```{r}
#| echo: true
#| eval: false

# Text for annotations and titles.
growth_text <- "Line height and colour show change in reported cases 
relative to May 3"
case_text <- "Line thickness shows current number relative to 
county population"
title_text <- "Change in reported cases since May 3"

county_data |>
  ggplot()+
  geom_sf(data=state_boundaries, fill="#eeeeee", colour="#bcbcbc", linewidth=0.4)+
  ...
  ...
  ...
  # Plot growth legend lines.
  geom_path(
    data=legend_growth,
    aes(x=x+((day_num-1)*6000), y=y+((growth_rate-1)*50000),
      group=fips, linewidth=case_rate, alpha=binned_growth_rate, colour=binned_growth_rate),
      lineend="round"
  ) +
  # Text label for growth legend lines.
  geom_text(
    # For positioning manually edit growth_rate of Bledsoe.
    data=legend_growth %>% filter(day_num == max(county_data$day_num)) %>%
      mutate(growth_rate=if_else(county=="Bledsoe", -1,growth_rate)),
    aes(
      x=x+(day_num*6000)+10000,y=y+((growth_rate-1)*50000),
      label=str_wrap(label, 15), alpha=binned_growth_rate, colour=binned_growth_rate), 
      size=2.5
      )+
  annotate("text",
    x=bbox$xmax-.25*width, y=bbox$ymax+.08*height,
    label=str_wrap(growth_text,35), size=3.5, hjust=1
    )+
  
  # Plot case legend lines.
  geom_path(
    data=legend_case,
    aes(x=x+((day_num-1)*6000)+offset_day*width, y=y+((growth_rate-1)*50000),
      group=paste0(fips,offset), linewidth=offset_rate, alpha=binned_growth_rate, colour=binned_growth_rate), 
      lineend="round"
    ) +
  # Text label for case legend lines.
  annotate("text", 
    x=bbox$xmax-.88*width, y=bbox$ymax+.04*height, label="Less", size=2.5
    )+
  annotate("text", 
    x=bbox$xmax-.8*width, y=bbox$ymax+.04*height, label="More", size=2.5
    )+
  annotate("text", 
    x=bbox$xmax-.75*width, y=bbox$ymax+.08*height, label=str_wrap(case_text,35),
    size=3.5, hjust=0
    )+

  # Title.
  annotate("text", 
    x=bbox$xmax-.5*width, y=bbox$ymax+.15*height, label=title_text, size=5
    )+
  ...
  ...
  ...
```


## Conclusions

Communicating effectively with data is not an easy undertaking. Difficult decisions must be made around how much detail to sacrifice in favour of clarity and simplicity of message. Visual approaches can help here, giving cues that order and prioritise information and that build explanatory narratives using metaphor and other rhetorical devices. There are stellar examples of this from in-house data journalism teams, most obviously in recent evidence-based stories around the Covid-19 pandemic. We have considered some of these and the careful design decisions made when communicating data-driven stories in light of data, audience and intended purpose. Many leading data journalists use ggplot2 as their visualization toolkit of choice and in the technical section we demonstrated how more deliberatively designed graphics can be generated. This somewhat fiddly approach to creating graphics is different from the style of workflow envisaged in @sec-visual and @sec-explore on exploratory visual analysis. However, as demonstrated through the examples in this chapter and the book more generally, ggplot2 can be used for this more deliberative visualization design, making control over annotations, text labels and embedded graphics useful skills to develop.


## Further Reading

Cédric Scherer's excellent workshop at rstudio::conf(2022). Highly recommended as a resource for covering in a methodical way how to parameterise ggplot2 scales, coordinate systems, facets, annotation and labelling.

* Cédric Scherer, 2022. "Graphic Design with ggplot2: How to Create Engaging and Complex Visualizations in R", An rstudio::conf(2022) Workshop, [rstudio-conf-2022.github.io/ggplot2-graphic-design/](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/)

For a similarly excellent resource see:

* Kieran Healy, 2019. "Data Visualization: A Practical Introduction". *Princeton University Press*. 
  - Chapter 8

Data journalists at the BBC have assembled a useful 'cookbook' demonstrating basic but useful edits to standard ggplot2 graphics.

* BBC, 2019. "BBC Visual and Data Journalism cookbook for R graphics", [bbc.github.io/rcookbook/](https://bbc.github.io/rcookbook/)

High-level but principled description of how to incorporate annotations, customise scales and legends when generating plots for communication.

* Wickham, H., Çetinkaya-Rundel, M., Grolemund, G. 2023, "R for Data Science, 2nd Edition", *Orielly*.
  - Chapter 12.
