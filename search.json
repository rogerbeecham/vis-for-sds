[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Visualization for Social Data Science",
    "section": "Welcome",
    "text": "Welcome"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Visualization for Social Data Science",
    "section": "License",
    "text": "License\nThis website is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 4.0 License."
  },
  {
    "objectID": "preface.html#acknowledgments",
    "href": "preface.html#acknowledgments",
    "title": "Preface",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nBlah"
  },
  {
    "objectID": "preface.html#references",
    "href": "preface.html#references",
    "title": "Preface",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "01-intro.html#introduction",
    "href": "01-intro.html#introduction",
    "title": "1  Introduction",
    "section": "\n1.1 Introduction",
    "text": "1.1 Introduction\nThis chapter introduces the what, why and how of the book. An argument is presented for the use of visual approaches in modern data analysis before the key technologies and analysis frameworks for the book are introduced: computational notebooks executed in RMarkdown. The technical component consolidates on readers’ knowledge and understanding of R and RMarkdown as well as demonstrating how to organise and curate data science analyses as RStudio Projects."
  },
  {
    "objectID": "01-intro.html#concepts",
    "href": "01-intro.html#concepts",
    "title": "1  Introduction",
    "section": "\n1.2 Concepts",
    "text": "1.2 Concepts\n\n1.2.1 Why vis4sds?\nIt is now taken-for-granted that over the last decade or so new data, new technology and new ways of doing science have transformed how we approach the world’s problems. Evidence for this can be seen in the response to the Covid-19 pandemic. Enter Covid19 github into a search and you’ll be confronted with hundreds of repositories demonstrating how an ever-expanding array of data related to the pandemic can be collected, processed and analysed. Data Science is a term used widely to capture this shift.\nSince gaining traction in the corporate world, the term Data Science has been somewhat stretched, but it has its origins in the work of John Tukey’s The Future of Data Analysis (1962). Drawing on this, and a survey of more recent work, Donoho (2017) neatly identifies six key facets that a Data Science discipline might encompass1:\n\ndata gathering, preparation, and exploration;\ndata representation and transformation;\ncomputing with data;\ndata visualization and presentation;\ndata modelling;\nand a more introspective “science about data science”\n\nGlancing at this list, visualization could be interpreted as a single facet of data science process – something that happens after data gathering, preparation, exploration, but before modelling. Through this book you’ll learn, rather, that visualization is intrinsic to, and should inform, each of these activities.\nLet’s develop this idea by asking why data visualizations are used in the first place. In her book Visualization Analysis and Design, Tamara Munzner (2014) considers how humans and computers interface in the decision-making process. She makes the point that data visualization is ultimately about connecting people with data in order to make decisions – or to install humans in a ‘decision-making-loop’. There are very occasionally decision-making loops that are entirely computational and where an automated solution can be rolled out. Most situations, however, require some form of human intervention.\nIn Statistics textbooks the most commonly-cited example demonstrating problems with relying solely on computation, and so for the use of visualization, is Anscombe’s quartet. Here, Anscombe (1973) presents four datasets, each containing eleven observations and two variables for each observation. The data are synthetic, but let’s say that they are the weight and height of independent samples taken from a population of postgraduate students studying Data Science. Presented with a new dataset it makes sense to compute some summaries and doing so, we observe that the data appear identical – they contain the same means, variances and strong positive correlation coefficient (Figure 1.1). This seems appropriate since the data are measuring individuals’ weight and height. Although there may be some variation, we’d expect taller students to be heavier. Given these statistical summaries we can be assured that we are drawing samples from the same population of (Data Science) students.\n\n\n\n\nFigure 1.1: Data from Anscombe’s quartet\n\n\n\n\nLaying out the data in a meaningful way, horizontally according to weight (x) and vertically according to the height (y) to form a scatterplot, we quickly see that whilst these data contain the same statistical properties they are very different. Only dataset #1 now looks plausible if it were truly a measure of weights and heights drawn from a population of students.\n\n\n\n\nFigure 1.2: Plots of Anscombe’s quartet\n\n\n\n\nAnscombe’s is a deliberately contrived example2, but one can imagine many cases where important structure is missed or incorrect assumptions are made, without data being subject to thorough visual examination. The consequences are poorly specified models and potentially faulty claims. This is not to undermine the importance of numerical analysis. Numeric summaries that simplify patterns are extremely useful and Statistics has at its disposal an array of tools for helping to guard against making false claims from datasets – a theme that we will return to in chapters 6 and 7 when we think critically about the use of visual approaches for data analysis. There remain, though, certain classes of relation and context that cannot be easily captured through statistics alone.\nGeographic context, for example, is undoubtedly challenging to capture numerically; many of the early examples of data visualization have been of spatial phenomena and generated by Geographers (see Friendly 2007). We can also make a special case for the use of visual approaches in Social Data Science (SDS) applications due to their exploratory nature. Often datasets are being repurposed for social sciences research for the first time; contain complex structure and relations that cannot be easily captured by statistical summaries alone; and so the types of questions that can be asked and the techniques deployed to answer them cannot be easily specified in advance. The book demonstrates this as we explore (Chapter 4 and 5), model under uncertainty (Chapter 6 and 7) and communicate (Chapter 8) with various social science datasets.\n\n\n\n\n\n\nTask\n\n\n\nWatch Jo Wood’s TEDx talk demonstrating how visual techniques can be used to analyse urban travel behaviours. In the video Jo argues that bikeshare schemes can help democratise cycling, but also for their potential contributions to research – he briefly contrasts new, passively collected data sets with more “traditional” actively collected data for analysing how people move around cities. A compelling case is then made for the use of visualization to support analysis of these new forms behavioural datasets.\n\n\n\n1.2.2 What vis4sds?\nThe chapters of this book blend both theory and practical coding activity. We will cover fundamentals around visual data analysis from Information Visualization and Statistics. As the chapters progress, data processing and analysis code is applied to datasets from the Political Science, Urban and Transport Planning and Health domains. So the examples in the book demonstrate how visual approaches can be used to generate and evaluate real findings and knowledge.\nTo do this, we have to cover a reasonably broad set of data processing and analysis procedures. As well as developing expertise around designing data-rich, visually compelling graphics, we will need to cover more tedious aspects of data processing and wrangling. Additionally, if we are to learn how to make and communicate claims under uncertainty with our data graphics, then we need to cover some aspects of estimation and modelling from Statistics. In short, we cover most of Donoho (2017)’s six key facets of a data science discipline:\n\ndata gathering, preparation, and exploration (Chapters 2, 3, 4);\ndata representation and transformation (Chapters 2, 3);\ncomputing with data (Chapter 2, All chapters);\ndata visualization and presentation (All chapters);\ndata modelling (Chapters 4, 6, 7);\nand a more introspective “science about data science” (All chapters)\n\nThere is already a rich and impressive set of open resources practically introducing how to do modern Data Science (Wickham and Grolemund 2017), Visualization (Healy 2018) and Geographic Analysis (Lovelace, Nowosad, and Muenchow 2019). What makes this book different from these existing resources is that we will be doing applied data science throughout – we will be identifying and diagnosing problems when gathering data, discovering patterns (some maybe even spurious) as we do exploratory analysis, and attempt to make claims under uncertainty as we generate models based on observed patterns.\n\n1.2.3 How vid4sds?\n\n1.2.3.1 R for modern data analysis\nAll data collection, analysis and reporting activity will be completed using R and the RStudio Integrated Development Environment (IDE). Released as open source software as part of a research project in 1995, for some time R was the preserve of academics. From 2010s onwards, the R community expanded rapidly and along with Python is regarded as the key technology for doing data analysis.\nThere are many benefits that come from being fully open-source, with a critical mass of users. Firstly, there is an array of online fora, tutorials and code examples from which to learn. Second, with such a large community, there are numerous expert R users who themselves contribute by developing packages that extend its use.\nOf particular importance is the tidyverse package. This is a set of packages for doing data science authored by the software development team at RStudio. tidyverse packages share a principled underlying philosophy, syntax and documentation. Contained within the tidyverse is its data visualization package, ggplot2. This package pre-dates the tidyverse and is one of the most widely-used toolkits for generating data graphics. As with other heavily used visualization toolkits (Tableau, vega-lite) it is inspired by Leland Wilkinson’s The Grammar of Graphics, the gg in ggplot stands for Grammar of Graphics. Understanding the design principles behind the Grammar of Graphics (and tidyverse) is necessary for modern data analysis and so we will cover this in detail in Chapter 3.\n\n1.2.3.2 Rmarkdown for reproducible research\n\nReproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them.\nRoger Peng, Jeff Leek and Brian Caffo\n\nIn recent years there has been much introspection into how science works – around how statistical claims are made from reasoning over evidence. This came on the back of, amongst other things, a high profile paper published in Science (Open Science Collaboration 2015), which found that of 100 recent peer-reviewed psychology experiments, the findings of only 39 could be replicated. The upshot is that researchers must now make every possible effort to make their work transparent, such that “all aspects of the answer generated by any given analysis [can] be tested” (Brunsdon and Comber 2020).\nA reproducible research project should be accompanied with:\n\ncode and data that allows tables and figures presented in research outputs to be regenerated\ncode and data that does what it claims (the code works)\ncode and data that can be justified and explained through proper documentation\n\nIf these goals are met, then it may be possible for others to use the code on new and different data to study whether the findings reported in one project might be consistent with another; or to use the same data, but update the code to, for example, extend the original analysis (to perform a re-analysis). This model – generate findings, test for replicability in new contexts and re-analysis – is how knowledge development has always worked. However, to achieve this the data and procedures on which findings were generated must be made open and transparent.\nIn this setting, traditional proprietary data analysis software that support point-and-click interaction are problematic. First, whilst these software may rely on the sorts of packages and libraries with bundled code that R and Python uses for implementing statistical procedures, those libraries are closed. It is not possible, and therefore less common, for the researcher to fully interrogate into the underlying processes that are being implemented and the results need to be taken more or less on faith. Second, but probably most significantly (for us), it would be tedious to make notes describing all interactions performed when working with a dataset in SPSS or ArcGIS.\nAs a declarative programming language, it is very easy to provide such a provenance trail for your workflows in R since this necessarily exists in the analysis scripts. But more importantly, the Integrated Development Environments (IDEs) through which R (and Python) are most often accessed provide notebook environments that allow users to curate reproducible computational documents that blend input code, explanatory prose and outputs. Thruough the practical exercises in this book, we will prepare these sorts of notebooks using R Markdown."
  },
  {
    "objectID": "01-intro.html#techniques",
    "href": "01-intro.html#techniques",
    "title": "1  Introduction",
    "section": "\n1.3 Techniques",
    "text": "1.3 Techniques\nIt is anticipated that readers of this book might already have some familiarity with Rand the RStudio IDE. If not, then this section is designed to get you quickly up-and-running with Rand the RStudio and to briefly introduce you to ,RMardown.Rscripts andRStudio Projects`. The accompanying template file, 01-template.Rmd can be downloaded from the book’s companion website.\n\n1.3.1 R and RStudio\n\nInstall the latest version of R. Note that there are installations for Windows, macOS and Linux. Run the installation from the file you downloaded (an .exe or .pkg extension).\nInstall the latest version of RStudio Desktop. Note again that there are separate installations depending on operating system – for Windows an .exe extension, macOS a .dmg extension.\nOnce installed, open the RStudio IDE.\nOpen an R Script by clicking File > New File > R Script .\n\n\n\n\n\nFigure 1.3: The RStudio IDE\n\n\n\n\nYou should see a set of windows roughly similar to those in Figure 1.3. The top left pane is used either as a Code Editor (the tab named Untitled1) or Data Viewer. This is where you’ll write, organise and comment R code for execution or inspect datasets as a spreadsheet representation. Below this in the bottom left pane is the R Console, in which you write and execute commands directly. To the top right is a pane with the tabs Environment and History. This displays all objects – data and plot items, calculated functions – stored in-memory during an R session. In the bottom right is a pane for navigating through project directories, displaying plots, details of installed and loaded packages and documentation on their functions.\n\n1.3.2 Compute in the console\nYou will write and execute almost all code from the code editor pane. To start though let’s use R as a calculator by typing some commands into the Console. You’ll create an object (x) and assign it a value using the assignment operator (<-), then perform some simple statistical calculations using functions that are held within the base package.\n\n\n\n\n\n\nR package documentation\n\n\n\nThe base package is core and native to R. Unlike all other packages, it does not need to be installed and called explicitly. One means of checking the package to which a function you are using belongs is to call the help command (?) on that function: e.g. ?mean().\n\n\n\nType the commands contained in the code block below into your R Console. Notice that since you are assigning values to each of these objects they are stored in memory and appear under the Global Environment pane.\n\n\n# Create variable and assign a value.\nx <- 4\n# Perform some calculations using R as a calculator.\nx_2 <- x^2\n# Perform some calculations using functions that form baseR.\nx_root <- sqrt(x_2)\n\n\n1.3.3 Install some packages\nThere are two steps to getting packages down and available in your working environment:\n\n\ninstall.packages(\"<package-name>\") downloads the named package from a repository.\n\nlibrary(<package-name>) makes the package available in your current session.\n\n\nInstall tidyverse, the core collection of packages for doing Data Science in R, by running the code below:\n\n\ninstall.packages(\"tidyverse\")\n\nIf you have little or no experience in R, it is easy to get confused about downloading and then using packages in a session. For example, let’s say we want to make use of the simple features package (sf), which we will draw on heavily for performing spatial operations.\n\nRun the code below:\n\n\nlibrary(sf)\n\nUnless you’ve previously installed sf, you’ll probably get an error message that looks like this:\n\n> Error in library(sf): there is no package called ‘sf’\n\nSo let’s install it.\n\nRun the code below:\n\n\ninstall.packages(\"sf\")\n\nAnd now it’s installed, why not bring up some documentation on one of its functions (st_contains()).\n\nRun the code below:\n\n\n?st_contains()\n\nSince you’ve downloaded the package but not made it available to your session, you should get the message:\n\n> No documentation for ‘st_contains’ in specified packages and libraries\n\nSo let’s try again, by first calling library(sf).\n\nRun the code below:\n\n\nlibrary(sf)\n## Linking to GEOS 3.7.2, GDAL 2.4.1, PROJ 6.1.0\n?st_contains()\n\nNow let’s install some of the remaining core packages on which the course depends.\n\nRun the block below, which passes a vector of package names to the install.packages() function:\n\n\ninstall.packages(c(\"devtools\",\"here\", \"rmarkdown\", \"knitr\",\"fst\",\"tidyverse\",\n\"lubridate\", \"tidymodels\"))\n\n\n\n\n\n\n\nR package visibility\n\n\n\nIf you wanted to make use of a package only very occasionally in a single session, you could access it without explicitly loading it via library(<package-name>), using this syntax: <package-name>::<function_name>, e.g. ?sf::st_contains().\n\n\n\n1.3.4 Experiment with R Markdown\nR Markdown documents are suffixed with the extension .Rmd and based partly on Markdown, a lightweight markup language originally used as a means of minimising tedious mark-up tags (<header></header>) when preparing HTML documents. The idea is that you trade some flexibility in the formatting of your HTML for ease-of-writing. Working with R Markdown is very similar to Markdown. Sections are denoted hierarchically with hashes (#, ##, ###) and emphasis using * symbols (*emphasis* **added** reads emphasis added ). Different from standard Markdown, however, R Markdown documents can also contain code chunks to be run when the document is rendered or typeset – they are a mechanism for producing elegant reproducible notebooks.\nEach session of the course has an accompanying R Markdown file. In later sessions you will use these to author computational notebooks that blend code, analysis prose and outputs.\n\nDownload the 01-template.Rmd file for this chapter and open it in RStudio by clicking File > Open File ... > <your-downloads>/01-template.Rmd.\n\nA quick anatomy of an R Markdown files :\n\n\nYAML - positioned at the head of the document and contains metadata determining amongst other things the author details and the output format when typesetting.\nTEXT - incorporated throughout to document and comment on your analysis.\nCODE chunks - containing discrete blocks that are to be run when the .Rmd file is typeset or knit.\n\n\n\n\n\nFigure 1.4: The anatomy of R Markdown\n\n\n\n\nThe YAML section of an .Rmd file controls how your file is typeset and consists of key: value pairs enclosed by ---. Notice that you can change the output format – so should you wish you can generate for example .pdf, .docx files for your reports.\n---\nauthor: \"Roger Beecham\"\ndate: '2022-08-01'\ntitle: \"Chapter 01\"\noutput:html_document\n---\nR Markdown files are rendered or typeset with the knit button, annotated in the Figure above. This starts the knitr package and executes all the code chunks and outputs a markdown (.md) file. The markdown file can then be converted to many different output formats via pandoc.\n\n\nKnit the 01-template.Rmd file for this chapter, either by clicking the knit button or by typing ctrl + ⇧ + K on Windows, ⌘ + ⇧ + K on macOS.\n\nYou will notice that R Markdown code chunks can be customised in different ways. This is achieved by populating fields in the curly brackets at the start of the code chunk:\n```{r <chunk-name>, echo=TRUE, eval=FALSE, cache=FALSE}\n  # Some code that is either run or rendered.\n```\nA quick overview of the parameters.\n\n\n<chunk-name> - Chunks can be given distinct names. This is useful for navigating R markdown files. It also supports chaching – chunks with distinct names are only run once, important if certain chunks take some time to execute.\n\necho=<TRUE|FALSE> - Determines whether the code is visible or hidden from the typeset file. If you output file is a data analysis report you may not wish to expose lengthy code chunks as these may disrupt the discursive text that appears outside of the code chunks.\n\neval=<TRUE|FALSE> - Determines whether the code is evaluated (executed). This is useful if you wish to present some code in your document for display purposes.\n\ncache=<TRUE|FALSE> - Determines where the results from the code chunk are cached.\n\nFor a fuller introduction, it is worth downloading RStudio’s cheatsheets, which provide comprehensive details on how to configure R Markdown documents:\n\nOpen RStudio and select Help > Cheatsheets > R Markdown Cheat Sheet | R Markdown Reference Guide\n\n\n1.3.5 R Scripts\nWhilst there are obvious benefits to working in R Markdown documents when doing data analysis, there may be occasions where working in an script is preferable. R scripts are plain text files with the extension .R. Comments – text that are not executed as code – are denoted with the # symbol.\nR scripts are typically used for writing discrete but substantial code blocks that are to be executed. For example, a set of functions that relate to a particular use case might be organised into an R script. These then might be referred to in a data analysis from an .Rmd, which makes various use of these functions in a similar way as one might import a package. Below is an example script that we will encounter later in the course when creating flow visualizations in R. This script is saved with the file name bezier_path.R. If it were stored in a sensible location, like a project’s code folder, it could be called from an R Markdown file with source(./code/bezier_path). R Scripts can be edited in the same way as R Markdown files in RStudio, via the Code Editor pane.\n\n# bezier_path.R\n#\n# Author: Roger Beecham\n##############################################################################\n\n#' Functions for generating input data for asymmetric bezier curve for OD data,\n#' such that the origin is straight and destination curve. The retuned tibble\n#' is passed to geom_bezier().Parametrtisation follows that published in\n#' Wood et al. 2011. doi: 10.3138/carto.46.4.239.\n#' @param data A df with origin and destination pairs representing 2D locations\n#' (o_east, o_north, d_east, d_north) in cartesian (OSGB) space.\n#' @param degrees For converting to radians.\n#' @return A tibble of coordinate pairs representing asymmetric curve\n\nget_trajectory <- function(data) {\n  o_east=data$o_east\n  o_north=data$o_north\n  d_east=data$d_east\n  d_north=data$d_north\n  od_pair=data$od_pair\n\n  curve_angle=get_radians(-90)\n  east=(o_east-d_east)/6\n  north=(o_north-d_north)/6\n  c_east=d_east + east*cos(curve_angle) - north*sin(curve_angle)\n  c_north=d_north + north*cos(curve_angle) + east*sin(curve_angle)\n  d <- tibble(\n    x=c(o_east,c_east,d_east),\n    y=c(o_north,c_north,d_north),\n    od_pair=od_pair\n  )\n}\n\n# Convert degrees to radians.\nget_radians <- function(degrees) {\n  (degrees * pi) / (180)\n}\n\nTo an extent R Scripts are more straightforward than R Markdown files in that you don’t have to worry about configuring code chunks. They are really useful for quickly developing bits of code. This can be achieved by highlighting over the code that you wish to execute and clicking the Run icon at the top of the Code Editor pane or by typing ctrl + rtn on Windows, ⌘ + rtn on macOS\n\n1.3.6 Create an RStudio Project\nThroughout the book we will use project-oriented workflows. This is where all files pertaining to a data analysis – data, code and outputs – are organised from a single root folder and where file path discipline is used such that all paths are relative to the project’s root folder (see Bryan & Hester 2020). You can imagine that this sort of self-contained project set-up is necessary for achieving reproducibility of your research. It allows anyone to take a project and run it on their own machines without having to make any adjustments.\nYou might have noticed that when you open RStudio it automatically points to a working directory, likely the home folder for your local machine, denoted with ~/ in the Console. RStudio will by default save any outputs to this folder and will also expect any data you use to be saved there. Clearly if you want to incorporate neat, self-contained project workflows then you will want to organise your work from a dedicated project folder rather than the default home folder for your machine. This can be achieved with the setwd(<path-to-your-project>) function. The problem with doing this is that you insert a path which cannot be understood outside of your local machine at the time it was created. This is a real pain. It makes simple things like moving projects around on your machine an arduous task and most importantly it hinders reproducibility if others are to reuse your work.\nRStudio Projects are a really excellent feature of the RStudio IDE that resolve these problems. Whenever you load up an RStudio Project, R starts up and the working directory is automatically set to the project’s root folder. If you were to move the project elsewhere on your machine, or to another machine, a new root is automatically generated – so RStudio projects ensure that relative paths work.\n\n\n\n\nFigure 1.5: Creating an RStudio Project\n\n\n\n\nLet’s create a new Project for this book:\n\nSelect File > New Project > New Directory.\nBrowse to a sensible location and give the project a suitable name. Then click Create Project.\n\nYou will notice that the top of the Console window now indicates the root for this new project, in my case ~projects/vis4sds.\n\nIn the root of your project, create folders called reports, code, data, figures.\nSave this session’s  01-template.Rmd file to the reports folder.\n\nYour project’s folder structure should now look like this:\nvis4sds\\\n  vis4sds.Rproj\n  code\\\n  data\\\n  figures\\\n  reports\\\n    01-template.Rmd"
  },
  {
    "objectID": "01-intro.html#conclusions",
    "href": "01-intro.html#conclusions",
    "title": "1  Introduction",
    "section": "\n1.4 Conclusions",
    "text": "1.4 Conclusions\nVisual data analysis approaches are necessary for exploring complex patterns in data and to make and communicate claims under uncertainty. This is especially true of SDS applications, where:\n\ndatasets are being repurposed for social sciences research for the first time;\ncontain complex structure and geo-spatial relations that cannot be easily captured by statistical summaries alone;\nand, consequently, where the types of questions that can be asked and the techniques deployed to answer them cannot be easily specified in advance.\n\nIn this book we will demonstrate this as we explore (Chapter 4 and 5), model under uncertainty (Chapter 6) and communicate (Chapter 7 and 8) with various social science datasets. We will work with both new, large-scale behavioural datasets, as well as more traditional, administrative datasets located within various social science domains: Political Science, Crime Science, Urban and Transport Planning. We will do so using the statistical programming environment R, which along with Python, is the programming environment for modern data analysis. We will make use of various tools and software libraries that form part of the R ecosystem – the tidyverse for doing modern data science and R Markdown for authoring reproducible research projects."
  },
  {
    "objectID": "02-data.html#introduction",
    "href": "02-data.html#introduction",
    "title": "2  Data Fundamentals",
    "section": "\n2.1 Introduction",
    "text": "2.1 Introduction\nThis chapter covers some of the basics of how to describe and organise data. Whilst this might sound prosaic, there are several reasons why being able to consistently describe a dataset is important. First, it is the initial step in any analysis and helps delimit the research themes and technical procedures that can be deployed. This is especially relevant to modern Data Science-type workflows, where it is common to apply the same analysis templates for working over data. Describing your dataset with a consistent vocabulary enables you to identify which analysis templates to reuse. Second relates to the point in Chapter 1 that Social Data Science (SDS) projects usually involve repurposing datasets for the first time. It is often not obvious whether the data contain sufficient detail and structure to characterise the behaviours to be researched and the target populations they are assumed to represent. This leads to additional levels of uncertainty and places greater importance on the initial steps of data processing, description and exploration.\nThrough the chapter we will learn both language for describing and thinking about data, but also how to deploy some of the most important data processing and organisation techniques in R to wrangle real datasets. We will do so using data from New York’s Citibike scheme, accessed through the bikedata package, an API to Citibike’s publicly available origin-destination trip data.\n\n\n\n\n\n\nData vocabulary\n\n\n\nThe idea of applying a consistent vocabulary to describing your data applies especially to working with modern visualization toolkits (ggplot2, Tableau, vega-lite), and will be covered in some detail during the next session as we introduce Visualization Fundamentals and the Grammar of Graphics (Wilkinson 1999)."
  },
  {
    "objectID": "02-data.html#concepts",
    "href": "02-data.html#concepts",
    "title": "2  Data Fundamentals",
    "section": "\n2.2 Concepts",
    "text": "2.2 Concepts\n\n2.2.1 Data structure\nThroughout this book we will work with data frames. These are spreadsheet-like representations where rows are observations (cases/records) and columns are variables. In a data frame, each variable is a vector that must be of equal length. Where observations have missing values for certain variables – that is, where they may violate this equal-length requirement – the missing values must be substituted with something, usually with NA or similar. This constraint can cause difficulties. For example, when working with variables that contain values of different length for an observation. In these cases we create a special class of column, a list-column, a feature of data frames that we’ll return to later. Organising data according this simple structure – rows as observations, columns as variables – makes working with data more straightforward. A dedicted set of tools, made available via the tidyverse, can be deployed for performing most data tidying operations (Wickham 2014).\n\n2.2.2 Types of variable\nA widely-used classification for describing variables is that developed by Stevens (1946), when cosidering the level of measurement of a variable. Stevens (1946) organised variables into two classes: variables that describe categories of things and variables that describe measurements of things. Categories include attributes like gender, titlesand ranked orders (1st, 2nd, 3rd largest etc.). Measurements include quantities like distance, age, travel time.\nCategories can be further subdivided into those that are unordered (nominal) from those that are ordered (ordinal). Measurements can also be subdivided. Interval measurements are quantities that can be ordered and where the difference between two values is meaningful. Ratio measurements have both these properties, but also have a meaningful 0 – where 0 means the absence of something – and where the ratio of two values can be computed. The most common cited example of an interval measurement is temperature (in degrees C). Temperatures can be ordered and compared additively, but 0 degrees C does not mean the absence of temperature and 20 degrees C is not twice as “hot” as 10 degrees C.\n\n\n\n\nTable 2.1:  Breakdown of variable types \n \n Measurement \n    Description \n    Example \n    Operators \n    Midpoint \n    Spread \n  \n\nCategories\n\n `Nominal` \n    Non-orderable \n    Political parties; street names \n    =  ≠ \n    mode \n    entropy \n  \n\n `Ordinal` \n    Orderable \n    Terrorism threat levels \n    =  ≠ <> \n    median \n    percentile \n  \nMeasures\n\n `Interval` \n    Measurements \n    Temperatures; years \n    =  ≠ <> +  - \n    mean \n    variance \n  \n\n `Ratio` \n    ... | Counts \n    Distances; prices \n    =  ≠ <> +  - | × ÷ \n    mean \n    variance \n  \n\n\n\n\n\nWhy is this important? The measurement level of a variable determines the types of data analysis operations that can be performed and therefore allows us to efficiently make decisions when working with a dataset for the first time (Table 2.1).\n\n2.2.3 Types of observation\nObservations either together form an entire population or a subset, or sample that we expect represents a target population.\nYou no doubt will be familiar with these concepts, but we have to think a little more about this in Social Data Science applications as we may often be working with datasets that are so-called population-level. The Citibike dataset is a complete, population-level dataset in that every journey made through the scheme is recorded. Whether or not this is truly a population-level dataset, however, depends on the analysis purpose. When analysing the bikeshare dataset are we interested only in describing use within the Citibike scheme? Or are we taking the patterns observed through our analysis to make claims and inferences about cycling more generally?\nIf the latter, then there are problems as the level of detail we have on our sample is pretty trivial compared to traditional datasets, where we deliberately design data collection activities with a specified target population in mind. It may therefore be difficult to gauge how representative Citibike users and Citibike cycling is of New York’s general cycling population. The flipside is that passively collected data do not suffer from the same problems such as non-response bias and social-desirability bias as traditionally collected datasets.\n\n2.2.4 Tidy data\nWe will be working with data frames organised such that columns always and only refer to variables and rows always and only refer to observations. This arrangement, called tidy (Wickham 2014), has two key advantages. First, if data are arranged in a consistent way, then it is easier to apply and re-use tools for wrangling them due to data having the same underlying structure. Second, placing variables into columns, with each column containing a vector of values, means that we can take advantage of R’s vectorised functions for transforming data – we will demonstrate this in the technical element of this session.\nThe three rules for tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\n2.2.4.1 Drug treatment dataset\nTo elaborate further, we can use the example given in Wickham (2014), a drug treatment dataset in which two different treatments were administered to participants.\n\n\nTable 2.2: Table 1 of Wickham 2014\n\n\n\n\n(a) One untidy organisation \n \n person \n    treatment_a \n    treatment_b \n  \n\n\n John Smith \n    -- \n    2 \n  \n\n Jane Doe \n    16 \n    11 \n  \n\n Mary Johnson \n    3 \n    1 \n  \n\n\n\n\n\n(b) Alternative untidy organisation \n \n treatment \n    John Smith \n    Jane Doe \n    Mary Johnson \n  \n\n\n treatment_a \n    -- \n    16 \n    3 \n  \n\n treatment_b \n    2 \n    11 \n    1 \n  \n\n\n\n\n\n\n\n(c) Tidy organisation \n \n person \n    treatment \n    result \n  \n\n\n John Smith \n    a \n    -- \n  \n\n John Smith \n    b \n    2 \n  \n\n Jane Doe \n    a \n    16 \n  \n\n Jane Doe \n    b \n    11 \n  \n\n Mary Johnson \n    a \n    3 \n  \n\n Mary Johnson \n    b \n    1 \n  \n\n\n\n\n\nBoth untidy tables present the same information unambiguously – Table 2.2 (b) is simply Table 2.2 (a) transposed. However, neither is tidy as the observations are spread across both the rows and columns. This means that we need to apply different procedures to extract, perform computations on, and visually represent, these data.\nIn the tidy form, each observation is a test result returned for each combination of person and treatment. To get to this formulation, it is necessary to identify the discrete variables:\n\n\nperson: a categorical nominal variable which takes three values: John Smith, Jane Doe, Mary Johnson.\n\ntreatment: a categorical nominal variable which takes values: a and b.\n\nresult: a measurement ratio (I think) variable which six recorded values (including the missing value): –, 16, 3, 2, 11,\n\n2.2.4.2 Gapminder population dataset\nIn Wickham and Grolemund (2017), the benefits of tidy layouts are demonstrated with the gapminder dataset and with refernce to key data processing functions in R. To consolidate our understanding of tidy data let’s quickly look at the gapminder data, as it is an example that we’re probably more likely to encounter in SDS research.\n\n\nTable 2.3: Excerpts of gapminder dataset.\n\n\n\n\n(a) Tidy organisation \n \n country \n    year \n    cases \n    population \n  \n\n\n Afghanistan \n    1999 \n    745 \n    19987071 \n  \n\n Afghanistan \n    2000 \n    2666 \n    20595360 \n  \n\n Brazil \n    1999 \n    37737 \n    172006362 \n  \n\n Brazil \n    2000 \n    80488 \n    174504898 \n  \n\n China \n    1999 \n    212258 \n    1272915272 \n  \n\n China \n    2000 \n    213766 \n    1280428583 \n  \n\n\n\n\n\n(b) Untidy organisation \n \n country \n    year \n    type \n    count \n  \n\n\n Afghanistan \n    1999 \n    cases \n    745 \n  \n\n Afghanistan \n    1999 \n    population \n    19987071 \n  \n\n Afghanistan \n    2000 \n    cases \n    2666 \n  \n\n Afghanistan \n    2000 \n    population \n    20595360 \n  \n\n Brazil \n    1999 \n    cases \n    37737 \n  \n\n Brazil \n    1999 \n    population \n    174504898 \n  \n\n ... \n    ... \n    ... \n    ... \n  \n\n\n\n\n\n\n\n(c) Another untidy organisation \n \n country \n    year \n    f_cases \n    m_cases \n    f_population \n    m_population \n  \n\n\n Afghanistan \n    1999 \n    447 \n    298 \n    9993400 \n    9993671 \n  \n\n Afghanistan \n    2000 \n    1599 \n    1067 \n    10296280 \n    10299080 \n  \n\n Brazil \n    1999 \n    16982 \n    20755 \n    86001181 \n    86005181 \n  \n\n Brazil \n    2000 \n    39440 \n    41048 \n    87251329 \n    87253569 \n  \n\n China \n    1999 \n    104007 \n    108252 \n    636451250 \n    636464022 \n  \n\n China \n    2000 \n    104746 \n    109759 \n    640212600 \n    640215983 \n  \n\n\n\n\n\nFrom the atidy version of the data, we can identify the variables and note that each observation is a recorded count of cases and population for a country in a year.\n\n\ncountry: a categorical nominal variable.\n\nyear: a date (cyclic ratio) variable.\n\ncases: a ratio (count) variable.\n\npopulation: a ratio (count) variable.\n\nAn alternative organisation of this dataset that appears in Wickham and Grolemund (2017) is in Table 2.3 (b). This is untidy as the observations are spread across two rows. This makes operations that we might want to perform on the cases and population variables – for example computing exposure rates – somewhat tedious.\nImagine that the gapminder dataset reported values of cases separately by gender – Table 2.3 (c). A type of representation often seen in social science domains, probably as it is helpful for data entry, is where observations are spread across the columns. This too creates problems for performing aggregate functions, but also for specifying visualization designs (in ggplot2) as we will discover in the next session."
  },
  {
    "objectID": "02-data.html#techniques",
    "href": "02-data.html#techniques",
    "title": "2  Data Fundamentals",
    "section": "\n2.3 Techniques",
    "text": "2.3 Techniques\nThe technical element to this chapter involves importing, describing, transforming and tidying data from a large bikeshare scheme – New York’s Citibike scheme.\n\nDownload the 02-template.Rmd file and save it to the reports folder of your vis4sds project that you created in chapter 1.\nOpen your vis4sds project in RStudio and load the template file by clicking File > Open File ... > reports/02-template.Rmd.\n\n\n2.3.1 Import\nIn the template file there is a discussion of how to setup your R session with key packages – tidyverse , fst, lubridate, sf – and also the bikedata package for accessing bikeshare data.\nAvailable via the bikedata package are trip and occupancy data for a number of bikeshare schemes (as below). We will work with data from New York’s Citibike scheme for June 2020. A list of all cities covered by the bikedata package is below:\n\nbike_cities()\n##    city     city_name      bike_system\n## 1    bo        Boston           Hubway\n## 2    ch       Chicago            Divvy\n## 3    dc Washington DC CapitalBikeShare\n## 4    gu   Guadalajara           mibici\n## 5    la   Los Angeles            Metro\n## 6    lo        London        Santander\n## 7    mo      Montreal             Bixi\n## 8    mn   Minneapolis         NiceRide\n## 9    ny      New York         Citibike\n## 10   ph  Philadelphia           Indego\n## 11   sf      Bay Area       FordGoBike\n\nIn the template there are code chunks demonstrating how to download and process these data using bikedata’s API. This is mainly for illustrative purposes and the code chunks take some time to execute. We ultimately use the fst package for serializing and reading in the these data. So I suggest you ignore the import code and calls to the bikedata API and instead follow the instructions for downloading and reading in the .fst file with the trips data and also the .csv file containing stations data, with:\n\n# Create subdirectory in data folder for storing bike data.\nif(!dir.exists(here(\"data\", \"bikedata\"))) dir.create(here(\"data\", \"bikedata\"))\n\n# Read in .csv file of stations data from url.\ntmp_file <- tempfile()\nurl <- \"https://www.roger-beecham.com/datasets/ny_stations.csv\"\ncurl::curl_download(url, tmp_file, mode=\"wb\")\nny_stations <- read_csv(tmp_file)\n\n# Read in .fst file of trips data from url.\ntmp_file <- tempfile()\ncs_url <- \"https://www.roger-beecham.com/datasets/ny_trips.fst\"\ncurl::curl_download(url, tmp_file, mode=\"wb\")\nny_trips <- read_fst(tmp_file)\n\n# Write out to subdirectory for future use.\nwrite_fst(trips, here(\"data\", \"ny_trips.fst\"))\nwrite_csv(stations, here(\"data\", \"ny_stations.csv\"))\n\n# Clean workspace.\nrm(url, tmp_file)\n\n\n\n\n\n\n\nNote\n\n\n\nfst implements in the background various operations such as multi-threading to reduce load on disk space. It therefore makes it possible to work with large datasets in-memory in R rather than connecting to a database and serving up summaries/subsets to be loaded into R. We will be working with just 2 million records, but with fst it is possible to work in-memory with much larger datasets – in Lovelace et al. (2020) we ended up working with 80 million + trip records.\n\n\nSome of the above may be familiar to you. The key arguments to look at are read_csv() and read_fst(), into which we pass the path to the file. In this case we created a tmpfile() within the R session. We then write these data out and save locally to the project’s data folder. This is useful as we only want to download the data once. In the write_*<> functions we reference this location using the here package’s here() function. here is really useful for reliably creating paths relative to your project’s root. To read in these data for future sessions:\n\n# Read in these local copies of the trips and stations data.\nny_trips <- read_fst(here(\"data\", \"ny_trips.fst\"))\nny_stations <- read_csv(here(\"data\", \"ny_stations.csv\"))\n\nNotice that we use assignment here (<-) so that these data are loaded as objects and appear in the Environment pane of your RStudio window.\nny_stations and ny_trips are data frames, spreadsheet type representations containing observations in rows and variables in columns. Inspecting the layout of the stations data with View(ny_stations) you will notice that the top line is the header and contains column (variable) names.\n\n\n\n\nFigure 2.1: ny_trips and ny_stations as they appear when calling View().\n\n\n\n\n\n2.3.2 Describe\nThere are several functions for generating a quick overview of a data frame’s contents. glimpse<dataset-name> is particularly useful. It provides a summary of the data frame dimensions – we have c. 1.9 million trip observations in ny_trips and 11 variables1. The function also prints out the object type for each of these variables, with the variables either of type int or chr in this case.\n\nglimpse(ny_trips)\n## Rows: 1,882,273\n## Columns: 11\n## $ id               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21…\n## $ city             <chr> \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"…\n## $ trip_duration    <dbl> 1062, 3810, 1017, 226, 1437, 355, 99, 1810, 87, 2714, 2096, 1611, 529, 69…\n## $ start_time       <chr> \"2020-06-01 00:00:03\", \"2020-06-01 00:00:03\", \"2020-06-01 00:00:09\", \"202…\n## $ stop_time        <chr> \"2020-06-01 00:17:46\", \"2020-06-01 01:03:33\", \"2020-06-01 00:17:06\", \"202…\n## $ start_station_id <chr> \"ny3419\", \"ny366\", \"ny389\", \"ny3255\", \"ny367\", \"ny248\", \"ny3232\", \"ny3263…\n## $ end_station_id   <chr> \"ny3419\", \"ny336\", \"ny3562\", \"ny505\", \"ny497\", \"ny247\", \"ny390\", \"ny496\",…\n## $ bike_id          <chr> \"39852\", \"37558\", \"37512\", \"39674\", \"21093\", \"39594\", \"43315\", \"16571\", \"…\n## $ user_type        <chr> \"Customer\", \"Subscriber\", \"Customer\", \"Customer\", \"Customer\", \"Subscriber…\n## $ birth_year       <chr> \"1997\", \"1969\", \"1988\", \"1969\", \"1997\", \"1990\", \"1938\", \"1995\", \"1971\", \"…\n## $ gender           <dbl> 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n\n\nglimpse(ny_stations)\n## Rows: 1,010\n## Columns: 6\n## $ id        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2…\n## $ city      <chr> \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"ny\", \"n…\n## $ stn_id    <chr> \"ny116\", \"ny119\", \"ny120\", \"ny127\", \"ny128\", \"ny143\", \"ny144\", \"ny146\", \"ny150\",…\n## $ name      <chr> \"W 17 St & 8 Ave\", \"Park Ave & St Edwards St\", \"Lexington Ave & Classon Ave\", \"B…\n## $ longitude <chr> \"-74.00149746\", \"-73.97803415\", \"-73.95928168\", \"-74.00674436\", \"-74.00297088\", …\n## $ latitude  <chr> \"40.74177603\", \"40.69608941\", \"40.68676793\", \"40.73172428\", \"40.72710258\", \"40.6…\n\n\n\n\nThe object type of a variable in a data frame relates to that variable’s measurement level. It is often useful to convert to types with greater specificity. For example, we may which to convert the start_time and stop_time variables to a date-time format so that various time-related functions could be used. For efficient storage, we may wish to convert the station identifier variables as int types by removing the redundant “ny” text which prefaces end_station_id, end_station_id, stn_id. The geographic coordinates are currently stored as type chr. These could be regarded as quantitative variables, floating points with decimals. So converting to type dbl or as a POINT geometry type (more on this later in the course) may be sensible.\nIn the 02-template.Rmd file there are code chunks for doing these conversions. There are some slightly more involved data transform procedures in this code. Don’t fixate too much on these, but the upshot can be seen when running glimpse() on the converted data frames:\n\nglimpse(ny_trips)\n## Rows: 1,882,273\n## Columns: 10\n## $ id               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2…\n## $ trip_duration    <dbl> 1062, 3810, 1017, 226, 1437, 355, 99, 1810, 87, 2714, 2096, 1611, 529, 695, 206,…\n## $ start_time       <dttm> 2020-06-01 00:00:03, 2020-06-01 00:00:03, 2020-06-01 00:00:09, 2020-06-01 00:00…\n## $ stop_time        <dttm> 2020-06-01 00:00:03, 2020-06-01 00:00:03, 2020-06-01 00:00:09, 2020-06-01 00:00…\n## $ start_station_id <int> 3419, 366, 389, 3255, 367, 248, 3232, 3263, 390, 319, 237, 3630, 3610, 3708, 465…\n## $ end_station_id   <int> 3419, 336, 3562, 505, 497, 247, 390, 496, 3232, 455, 3263, 3630, 3523, 3740, 379…\n## $ bike_id          <int> 39852, 37558, 37512, 39674, 21093, 39594, 43315, 16571, 28205, 41760, 30745, 380…\n## $ user_type        <chr> \"Customer\", \"Subscriber\", \"Customer\", \"Customer\", \"Customer\", \"Subscriber\", \"Sub…\n## $ birth_year       <int> 1997, 1969, 1988, 1969, 1997, 1990, 1938, 1995, 1971, 1989, 1990, 1969, 1984, 19…\n## $ gender           <chr> \"female\", \"unknown\", \"female\", \"unknown\", \"female\", \"male\", \"female\", \"female\", …\n\n\nglimpse(ny_stations)\n## Rows: 1,010\n## Columns: 5\n## $ id        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, …\n## $ stn_id    <int> 116, 119, 120, 127, 128, 143, 144, 146, 150, 151, 157, 161, 164, 167, 168, 173, 174, 19…\n## $ name      <chr> \"W 17 St & 8 Ave\", \"Park Ave & St Edwards St\", \"Lexington Ave & Classon Ave\", \"Barrow S…\n## $ longitude <dbl> -74.00150, -73.97803, -73.95928, -74.00674, -74.00297, -73.99338, -73.98069, -74.00911,…\n## $ latitude  <dbl> 40.74178, 40.69609, 40.68677, 40.73172, 40.72710, 40.69240, 40.69840, 40.71625, 40.7208…\n\n\n2.3.3 Transform\n\n2.3.3.1 Transform with dplyr\n\n\n\n\n\nTable 2.4:  dplyr funcitions (verbs) for manipulating data frames. \n \n function() \n    Description \n  \n\n\n `filter()` \n    Picks rows (observations) if their values match a specified criteria \n  \n\n `arrange()` \n    Reorders rows (observations) based on their values \n  \n\n `select()` \n    Picks a subset of columns (variables) by name (or name characteristics) \n  \n\n `rename()` \n    Changes the name of columns in the data frame \n  \n\n `mutate()` \n    Adds new columns (or variables) \n  \n\n `group_by()` \n    Chunks the dataset into groups for grouped operations \n  \n\n `summarise()` \n    Calculate single-row (non-grouped) or multiple-row (if grouped) summary values \n  \n\n `..and more` \n     \n  \n\n\n\n\n\ndplyr is one of the most important packages for supporting modern data analysis workflows. The package provides a grammar of data manipulation, with access to functions that can be variously combined to support most data processing and transformation activity. Once you become familiar with dplyr functions (or verbs) you will find yourself generating analysis templates to re-use whenever you work on a new dataset.\nAll dplyr functions work in the same way:\n\nStart with a data frame.\nPass some arguments to the function which control what you do to the data frame.\nReturn the updated data frame.\n\nSo every dplyr function expects a data frame and will always return a data frame.\n\n2.3.3.2 Use pipes %>% with dplyr\n\ndplyr is most effective when its functions are chained together – you will see this shortly as we explore the New York bikeshare data. This chaining of functions can be achieved using the pipe operator (%>%). Pipes are used for passing information in a program. They take the output of a set of code (a dplyr specification) and make it the input of the next set (another dplyr specification).\nPipes can be easily applied to dplyr functions, and the functions of all packages that form the tidyverse. We mentioned in Chapter 1 that ggplot2 provides a framework for specifying a layered grammar of graphics (more on this in Chapter 3). Together with the pipe operator (%>%), dplyr supports a layered grammar of data manipulation.\n\n2.3.3.3 count() rows\nThis might sound a little abstract so let’s use and combine some dplyr functions to generate some statistical summaries on the New York bikeshare data.\nFirst we’ll count the number of trips made in Jun 2020 by gender. dplyr has a convenience function for counting, so we could run the code below, also in the 02-template.Rmd for this session. I’ve commented the code block to convey what each line achieves.\n\nny_trips %>%  # Take the ny_trips data frame.\n  count(gender, sort=TRUE) # Run the count function over the data frame and set the sort parameter to TRUE.\n##    gender       n\n## 1    male 1044621\n## 2  female  586361\n## 3 unknown  251291\n\nThere are a few things happening in the count() function. It takes the gender variable from ny_trips, organises or groups the rows in the data frame according to its values (female | male | unknown), counts the rows and then orders the summarised output descending on the counts.\n\n2.3.3.4 summarise() over rows\n\n\n\n\nTable 2.5:  A breakdown of aggregate functions commonly used with summarise(). \n \n Function \n    Description \n  \n\n\n `n()` \n    Counts the number of observations \n  \n\n `n_distinct(var)` \n    Counts the number of unique observations \n  \n\n `sum(var)` \n    Sums the values of observations \n  \n\n `max(var)`|`min(var)` \n    Finds the min|max values of observations \n  \n\n `mean(var)`|`median(var)`|`sd(var)`| `...` \n    Calculates central tendency of observations \n  \n\n `...` \n    Many more \n  \n\n\n\n\n\nOften you will want to do more than simply counting and you may also want to be more explicit in the way the data frame is grouped for computation. We’ll demonstrate this here with a more involved analysis of the usage data and using some key aggregate functions (Table Table 2.5.\nA common workflow is to combine group_by() and summarise(), and in this case arrange() to replicate the count() example.\n\nny_trips %>% # Take the ny_trips data frame.\n  group_by(gender) %>% # Group by gender.\n  summarise(count=n()) %>% # Count the number of observations per group.\n  arrange(desc(count)) # Arrange the grouped and summarised (collapsed) rows according to count.\n## # A tibble: 3 x 2\n##  gender    count\n##  <chr>     <int>\n## 1 male    1044621\n## 2 female   586361\n## 3 unknown  251291\n\nIn ny_trips there is a variable measuring trip duration in seconds (trip_duration) and distinguishing casual users from those formally registered to use the scheme (user_type - Customer vs. Subscriber). It may be instructive to calculate some summary statistics to see how trip duration varies between these groups.\nThe code below uses group_by(), summarise() and arrange() in exactly the same way, but with the addition of other aggregate functions profiles the trip_duration variable according to central tendency and by user_type.\n\nny_trips %>% # Take the ny_trips data frame.\n  group_by(user_type) %>% # Group by user type.\n  summarise( # Summarise over the grouped rows, generate a new variable for each type of summary.\n    count=n(),\n    avg_duration=mean(trip_duration/60),\n    median_duration=median(trip_duration/60),\n    sd_duration=sd(trip_duration/60),\n    min_duration=min(trip_duration/60),\n    max_duration=max(trip_duration/60)\n    ) %>%\n  arrange(desc(count)) # Arrange on the count variable.\n\n## # A tibble: 2 x 6\n##  user_type    count avg_duration median_duration sd_duration min_duration max_duration\n##  <chr>        <int>        <dbl>           <dbl>       <dbl>        <dbl>        <dbl>\n## 1 Subscriber 1306688         20.2            14.4        110.         1.02         33090\n## 2 Customer    575585         43.6            23.2        393.         1.02         46982\n\nClearly there are some outlier trips that may need to be examined. Bikeshare schemes are built to incentivise short journeys of <30 minutes, but the maximum trip duration recorded above is clearly erroneous – 32 days. Ignoring these sorts of outliers by calculating the trip durations at the 95th percentiles is instructive. The max trip duration at the 95th percentile for Subscribers was almost 27 minutes and for Customers was 1 hours 26 mins. It makes sense that more casual users may have longer trip durations, as they are more likely to be tourists or occasional cyclists using the scheme for non-utility trips. However, they do skew the mean travel time.\nReturning to the breakdown of usage by gender, an interesting question is whether or not the male-female split in bikehare is similar to that of the cycling population of New York City as a whole. This might tell us something about whether the bikeshare scheme could be representative of wider cycling. This could be achieved with the code below. A couple of new additions: we use filter(), to remove observations where the gender of the cyclist is unknown. We also use mutate() for the first time, which allows us to modify or create new variables.\n\nny_trips %>% # Take the ny_trips data frame.\n  filter(gender != \"unknown\") %>% # Filter out rows with the value \"unknown\" on gender.\n  group_by(gender) %>% # Group by gender.\n  summarise(count=n()) %>% # Count the number of observations per group.\n  mutate(prop=count/sum(count)) %>% # Add a new column called `prop`, divide the value in the row for the variable count by the sum of the count variable across all rows.\n  arrange(desc(count)) # Arrange on the count variable.\n\n## # A tibble: 2 x 3\n##  gender   count  prop\n##  <chr>    <int> <dbl>\n## 1 male   1044621 0.640\n## 2 female  586361 0.360\n\nAs I’ve commented each line you hopefully get a sense of what is happening in the code above. I mentioned that dplyr functions read like verbs. This is a very deliberate design decision. With the code laid out as above – each dplyr verb occupying a single line, separated by a pipe (%>%) – you can generally understand the code with a cursory glance. There are obvious benefits to this. Once you become familiar with dplyr it becomes very easy to read, write and share code.\n\n\n\n\n\n\nNote\n\n\n\nRemembering that pipes (%>%) take the output of a set of code and make it the input of the next set, what do you think would happen if you were to comment out the call to arrange() in the code block above? Try it for yourself. You will notice that I use separate lines for each call to the pipe operator. This is good practice for supporting readability of your code.\n\n\n\n2.3.3.5 Manipulate dates with lubridate\n\nLet’s continue this investigation of usage by gender, and whether bikeshare might be representative of regular cycling, by profiling how usage varies over time. To do this we will need to work with date-time variables. The lubridate package provides various convenience functions for this.\nIn the code block below we extract the day of week and hour of day from the start_time variable using lubridate’s day accessor functions. Documentation on these can be accessed in the usual way (?<function-name>), but reading down the code it should be clear to you how this works. Next we count the number of trips made by hour of day, day of week and gender. The summarised data frame will be re-used several times in our analysis, so we store it as an object with a suitable name (ny_temporal) using the assignment operator.\n\n# Create a hod dow summary by gender and assign it the name \"ny_temporal\".\nny_temporal <- ny_trips %>%  # Take the ny_trips data frame.\n  mutate(\n    day=wday(start_time, label=TRUE), # Create a new column identify dow.\n    hour=hour(start_time)) %>% # Create a new column identify hod.\n  group_by(gender, day, hour) %>% # Group by day, hour, gender.\n  summarise(count=n()) %>% # Count the grouped rows.\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\nWhether or not to store derived data tables, like the newly assigned ny_temporal, in a session is not an easy decision. You want to try to avoid cluttering your Environment pane with many data objects. Often when generating charts it is necessary to create these sorts of derived tables as input data (to ggplot2) – and so when doing visual data analysis you may end up with an unhelpfully large number of these derived tables. A general: if the derived table is to be used >3 times in a data analysis or is computationally intensive, assign it (<-) to an object.\n\n\nIn Figure 2.2 below these derived data are plotted. The template contains ggplot2 code for creating the graphic. Don’t obsess too much on it – more on this next session. The plot demonstrates a familiar weekday-weekend pattern of usage. Trip frequencies peak in the morning and evening rush hours during weekdays and mid/late-morning and afternoon during weekends. This is consistent with typical travel behaviour. Notice though that the weekday afternoon peak is much larger than the morning peak. There are several speculative explanations for this and re-running the plot on Subscriber users only may be instructive. A secondary observation is that whilst men and women share this overall pattern of usage, the relative number of trips taken by each day of week varies. Men make many more trips at peak times during the start of the week than they do later in the week. The same pattern does not appear for women. This is certainly something to follow up on, for example by collecting data over a longer period of time.\n\n\n\n\nFigure 2.2: Line charts generated with ggplot2. Plot data computed using dplyr and lubridate.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOur analysis is based on data from June 2020, a time when New York residents were emerging from lockdown. It would be instructive to compare with data from a non-Covid year. If there is a very clear contrast in usage between this data and a control (non-Covid) year, this suggests bikeshare data may be used for monitoring behavioural change. The fact that bikeshare is collected continuously makes this possible. Check out Jo Wood’s current work analysing Covid-related change in movement behaviours across a range of cities.\n\n\n\n2.3.3.6 Relate tables with join()\n\nTrip distance is not recorded directly in the ny_trips table, but may be important for profiling usage behaviour. Calculating trip distance is eminently achievable as the ny_trips table contains the origin and destination station of every trip and the ny_stations table contains coordinates corresponding to those stations. To relate the two tables, we need to specify a join between them.\nA sensible approach is to:\n\nSelect all uniquely cycled trip pairs (origin-destination pairs) that appear in the ny_trips table.\nBring in the corresponding coordinate pairs representing the origin and destination stations by joining on the ny_stations table.\nCalculate the distance between the coordinate pairs representing the origin and destination.\n\nThe code below is one way of achieving this.\n\nod_pairs <- ny_trips %>% # Take the ny_trips data frame.\nselect(start_station_id, end_station_id) %>% unique() %>% # Select trip origin and destination (OD) station columns and extract unique OD pairs.\n  left_join(ny_stations %>% select(stn_id, longitude, latitude), by=c(\"start_station_id\"=\"stn_id\")) %>% # Select lat, lon columns from ny_stations and join on the origin column.\n  rename(o_lon=longitude, o_lat=latitude) %>% # Rename new lat, lon columns -- associate with origin station.\n  left_join(ny_stations %>% select(stn_id, longitude, latitude), by=c(\"end_station_id\"=\"stn_id\")) %>% # Select lat, lon columns from ny_stations and join on the destination column.\n  rename(d_lon=longitude, d_lat=latitude) %>%  # Rename new lat, lon columns -- associate with destination station.\n  rowwise() %>% # For computing distance calculation one row-at-a-time.\n  mutate(dist=geosphere::distHaversine(c(o_lat, o_lon), c(d_lat, d_lon))/1000) %>% # Calculate distance and express in kms.\n  ungroup()\n\nThe code block above introduces some new functions: select() to pick or drop variables, rename() to rename variables and a convenience function for calculating straight line distance from polar coordinates (distHaversine()). The key function to emphasise is the left_join(). If you’ve worked with relational databases and SQL, dplyr’s join functions will be familiar to you. In a left_join, all the values from the main table are retained, the one on the left – ny_trips, and variables from the table on the right (ny_stations) are added. We specify explicitly the variable on which the tables should be joined with the by= parameter, station_id in this case. If there is a station_id in ny_trips that doesn’t exist in ny_stations then NA is returned.\nOther join functions provided by dplyr are in the table below. Rather than discussing each, I recommend consulting Chapter 13 of Wickham and Grolemund (2017).\n\n\n\n\nTable 2.6:  A breakdown of dplyr join functions. \n\n`*_join(x, y) ...`\n\n\n\n\n `left_join()` \n    all rows from x \n  \n\n `right_join()` \n    all rows from y \n  \n\n `full_join()` \n    all rows from both x and y \n  \n\n `semi_join()` \n    all rows from x where there are matching values in y, keeping just columns from x \n  \n\n `inner_join()` \n    all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches \n  \n\n `anti_join` \n    return all rows from x where there are not matching values in y, never duplicate rows of x \n  \n\n\n\n\n\n\n\n\n\nFigure 2.3: Histograms generated with ggplot2. Plot data computed using dplyr and lubridate\n\n\n\n\nFrom the newly created distance variable, we can calculate the average (mean) trip distance for the 1.9m trips – 1.6km. This might seem very short, but remember that the distance calculation is problematic in that these are straight-line distances between pairs of docking stations. Really we should be calculating network distances derived from the cycle network in New York. A separate reason – discovered when generating a histogram on the dist variable – is that there are a large number of trips (124,403) that start and end at the same docking station. Initially these might seem to be unsuccessful hires – people failing to undock a bike for example. We could investigate this further by paying attention to the docking stations at which same origin-destination trips occur, as in the code block below.\n\nny_trips %>%\n  filter(start_station_id==end_station_id) %>%\n  group_by(start_station_id) %>% summarise(count=n()) %>%\n  left_join(ny_stations %>%  select(stn_id, name), by=c(\"start_station_id\"=\"stn_id\")) %>%\n  arrange(desc(count))\n\n## # A tibble: 958 x 3\n##    start_station_id count name\n##    <chr>            <int> <chr>\n##  1 ny3423            2017 West Drive & Prospect Park West\n##  2 ny3881            1263 12 Ave & W 125 St\n##  3 ny514             1024 12 Ave & W 40 St\n##  4 ny3349             978 Grand Army Plaza & Plaza St West\n##  5 ny3992             964 W 169 St & Fort Washington Ave\n##  6 ny3374             860 Central Park North & Adam Clayton Powell Blvd\n##  7 ny3782             837 Brooklyn Bridge Park - Pier 2\n##  8 ny3599             829 Franklin Ave & Empire Blvd\n##  9 ny3521             793 Lenox Ave & W 111 St\n## 10 ny2006             782 Central Park S & 6 Ave\n## # … with 948 more rows\n\nAll of the top 10 docking stations are either in parks, near parks or located along river promenades. This coupled with the fact that these trips occur in much greater relative number for casual than regular users (Customer vs Subscriber) is further evidence that these are valid trips.\n\n2.3.3.7 Write functions of your own\nThrough most of the course we will be making use of functions written by others – mainly those developed for packages that form the tidyverse and therefore that follow a consistent syntax. However, there may be times where you need to abstract over some of your code to make functions of your own. Chapter 19 of Wickham and Grolemund (2017) presents some helpful guidelines around the circumstances under which the data scientist typically tends to write functions. Most often this is when you find yourself copy and pasting the same chunks of code with minimal adaptation.\nFunctions have three key characteristics:\n\nThey are (usually) named – the name should be expressive and communicate what the function does (we talk about dplyr verbs).\nThey have brackets <function()> usually containing arguments – inputs which determine what the function does and returns.\nImmediately followed by <function()> are {} used to contain the body – in this is code that performs a distinct task, described by the function’s name.\n\nEffective functions are short, perform single discrete operations and are intuitive.\nYou will recall that in the ny_trips table there is a variable called birth_year. From this we can derive cyclists’ approximate age. Below I have written a function get_age() for doing this. The function expects two arguments: yob – a year of birth as type chr; yref – a reference year. In the body, lubridate’s as.period function is used to calculate the time in years that elapsed, the value that the function returns. Once defined, and loaded into the session by being executed, it can be used (as below).\n\n# Function for calculating time elapsed between two dates in years (age).\nget_age <- function(yob, yref) {\n    period <- lubridate::as.period(lubridate::interval(yob, yref),unit = \"year\")\n    return(period$year)\n}\n\nny_trips <- ny_trips %>% # Take the ny_trips data frame.\n  mutate(\n    age=get_age(as.POSIXct(birth_year, format=\"%Y\"), as.POSIXct(\"2020\", format=\"%Y\")) # Calculate age from birth_date.\n    )\n\nWe can use the two new derived variables – distance travelled and age – in our analysis. In Figure @ref(fig:plot-speeds), we explore how approximate travel speeds vary by age, gender and trip distance. The code used to generate the summary data and plot is in the template file. Again the average “speed” calculation should be treated very cautiously as it is based on straight line distances and it is very difficult to select out “utility” from “leisure” trips. I have tried to do the latter by selecting trips that occur only on weekdays and that are made by Subscriber cyclists. Additionally, due to the heavy subsetting data become a little volatile for certain age groups and so I’ve aggregated the age variable into 5-year bands. Collecting more data is probably a good idea.\nThere are nevertheless some interesting patterns. Men tend to cycle at faster speeds than do women, although this gap narrows with the older age groups. The effect of age on speed cycled is more apparent for the longer trips. This trend is reasonably strong, although the volatility in the older age groups for trips >4.5km suggests we probably need more data and a more involved analysis to establish this. For example, it may be that the comparatively rare occurrence of trips in the 65-70 age group is made by only a small subset of cyclists. A larger dataset would result in a regression to the mean effect and negate any noise caused by outlier individuals. Certainly Figure @ref(tab:variable-types) is an interesting data graphic – and the type of exploratory analysis demonstrated here, using dplyr functions, is most definitely consistent with that identified in the previous session when introducing Social Data Science.\n\n\n\n\nFigure 2.4: Line charts generated with ggplot2. Plot data computed using dplyr and lubridate.\n\n\n\n\n\n2.3.4 Tidy\nThe ny_trips and ny_stations data already comply with the rules for tidy data (Wickham 2014). Each row in ny_trips is a distinct trip and each row in ny_stations a distinct station. However throughout the course we will undoubtedly encounter datasets that need to be reshaped. There are two key functions to learn here, made available via the tidyr package: pivot_longer() and pivot_wider(). pivot_longer() is used to tidy data in which observations are spread across columns, as in Table @ref(tab:gapminder-untidy1) (the gapminder dataset). pivot_wider() is used to tidy data in which observations are spread across rows, as in Table ?tbl-gapminder-untidy2 (the gapminder dataset). You will find yourself using these functions, particularly pivot_longer(), not only for fixing messy data, but for flexibly reshaping data for use in ggplot2 specifications (more on this in Chapter 3 and 4) or joining tables.\nA quick breakdown of pivot_longer:\n\npivot_longer(\n  data,\n  cols, # Columns to pivot longer (across rows).\n  names_to=\"name\", # Name of the column to create from values held in spread *column names*.\n  values_to=\"name\" # Name of column to create form values stored in spread *cells*\n  )\n\nA quick breakdown of pivot_wider:\n\npivot_wider(\n  data,\n  names_from, # Column in the long format which contains what will be column names in the wide format.\n  values_from # Column in the long format which contains what will be values in the new wide format.\n  )\n\nIn the homework you will be tidying some messy derived tables based on the bikeshare data using both of these functions, but we can demonstrate their purpose in tidying the messy gapminder data in Table ?tbl-gapminder-untidy2. Remember that these data were messy as the observations by gender were spread across the columns:\n\nuntidy_wide\n##   country     year  f_cases m_cases f_population m_population\n##   <chr>       <chr> <chr>   <chr>   <chr>        <chr>\n## 1 Afghanistan 1999  447     298     9993400      9993671\n## 2 Afghanistan 2000  1599    1067    10296280     10299080\n## 3 Brazil      1999  16982   20755   86001181     86005181\n## 4 Brazil      2000  39440   41048   87251329     87253569\n## 5 China       1999  104007  108252  636451250    636464022\n## 6 China       2000  104746  109759  640212600    640215983\n\nFirst we need to gather the problematic columns with pivot_longer().\n\nuntidy_wide %>%\n  pivot_longer(cols=c(f_cases: m_population), names_to=c(\"gender_count_type\"), values_to=c(\"counts\"))\n\n##   country     year  gender_count_type       counts\n##   <chr>       <chr> <chr>                   <chr>\n##  1 Afghanistan 1999  f_cases                447\n##  2 Afghanistan 1999  m_cases                298\n##  3 Afghanistan 1999  f_population           9993400\n##  4 Afghanistan 1999  m_population           9993671\n##  5 Afghanistan 2000  f_cases                1599\n##  6 Afghanistan 2000  m_cases                1067\n##  7 Afghanistan 2000  f_population           10296280\n##  8 Afghanistan 2000  m_population           10299080\n##  9 Brazil      1999  f_cases                16982\n## 10 Brazil      1999  m_cases                20755\n## # … with 14 more rows\n\nSo this has usefully collapsed the dataset by gender, we now have a problem similar to that in Table ?tbl-gapminder-untidy1 where observations are spread across the rows – in this instance cases and population are better treated as separate variables. This can be fixed by separating the gender_count_type variables and then spreading the values of the new count_type (cases, population) across the columns. Hopefully you can see how this gets us to the tidy gapminder data structure in Table ?tbl-gapminder-tidy.\n\nuntidy_wide %>%\n  pivot_longer(cols=c(f_cases: m_population), names_to=c(\"gender_count_type\"), values_to=c(\"counts\")) %>%\n  separate(col=gender_count_type, into=c(\"gender\", \"count_type\"), sep=\"_\")\n\n##    country     year  gender count_type counts\n##    <chr>       <chr> <chr>  <chr>      <chr>\n##  1 Afghanistan 1999  f      cases      447\n##  2 Afghanistan 1999  m      cases      298\n##  3 Afghanistan 1999  f      population 9993400\n##  4 Afghanistan 1999  m      population 9993671\n##  5 Afghanistan 2000  f      cases      1599\n##  6 Afghanistan 2000  m      cases      1067\n##  7 Afghanistan 2000  f      population 10296280\n##  8 Afghanistan 2000  m      population 10299080\n##  9 Brazil      1999  f      cases      16982\n## 10 Brazil      1999  m      cases      20755\n## # … with 14 more rows\n\nuntidy_wide %>%\n  pivot_longer(cols=c(f_cases: m_population), names_to=c(\"gender_count_type\"), values_to=c(\"counts\")) %>%\n  separate(col=gender_count_type, into=c(\"gender\", \"count_type\"), sep=\"_\") %>%\n  pivot_wider(names_from=count_type, values_from=counts)\n\n##    country     year  gender cases  population\n##    <chr>       <chr> <chr>  <chr>  <chr>\n##  1 Afghanistan 1999  f      447    9993400\n##  2 Afghanistan 1999  m      298    9993671\n##  3 Afghanistan 2000  f      1599   10296280\n##  4 Afghanistan 2000  m      1067   10299080\n##  5 Brazil      1999  f      16982  86001181\n##  6 Brazil      1999  m      20755  86005181\n##  7 Brazil      2000  f      39440  87251329\n##  8 Brazil      2000  m      41048  87253569\n##  9 China       1999  f      104007 636451250\n## 10 China       1999  m      108252 636464022\n## 11 China       2000  f      104746 640212600\n## 12 China       2000  m      109759 640215983"
  },
  {
    "objectID": "02-data.html#conclusions",
    "href": "02-data.html#conclusions",
    "title": "2  Data Fundamentals",
    "section": "\n2.4 Conclusions",
    "text": "2.4 Conclusions\nDeveloping the vocabulary and technical skills to systematically describe and organise data is crucial to modern data analysis. This chapter has covered the fundamentals here: that data consist of observations and variables of different types (Stevens 1946) and that in order to work effectively with datasets, especially in a functional way in R, these data must be organised according to the rules of tidy data (Wickham 2014). Most of the content was dedicated to the techniques that enable these concepts to be operationalised. We covered how to download, transform and reshape a reasonably large set of data from New York’s Citibike scheme. In doing so, we generated insights that might inform further data collection and analysis activity. In the next chapter we will apply and extend this conceptual and technical knowledge as we introduce the fundamentals of visual data analysis and ggplot2’s grammar of graphics."
  },
  {
    "objectID": "03-visual.html#introduction",
    "href": "03-visual.html#introduction",
    "title": "3  Visualization Fundamentals",
    "section": "\n3.1 Introduction",
    "text": "3.1 Introduction\nThis chapter outlines the fundamentals of visualization design. It offers a position on what effective data graphics should do, before discussing in detail the processes that take place when creating data graphics. You will learn that there is a framework – a vocabulary and grammar – for supporting this process which, combined with established knowledge around visual perception, can be used to describe, evaluate and create effective data graphics. Talking about a vocabulary and grammar of data and graphics may sound somewhat abstract, the preserve of Computer Scientists. However, through an analysis of 2019 General Election results data you will appreciate that these concepts underpin most visual data analysis.\n\n\n\n\n\n\nTask\n\n\n\nWatch Miriah Meyer’s TEDx talk, Information Visualization for Scientific Discovery, which provides a nice introduction to many of the concepts covered in the chapter."
  },
  {
    "objectID": "03-visual.html#concepts",
    "href": "03-visual.html#concepts",
    "title": "3  Visualization Fundamentals",
    "section": "\n3.2 Concepts",
    "text": "3.2 Concepts\nData graphics take numerous forms and are used in many different ways by scientists, journalists, designers and many more. Whilst the intentions of those producing data graphics varies, those that are effective generally have the following characteristics:\n\nRepresent complex datasets graphically: exposing structure, connections and comparisons that could not be achieved easily via other means.\nAre data rich: present many numbers in a small space.\nReveal patterns at several levels of detail: from broad overview to fine structure.\nHave elegance: emphasise dimensions of a dataset without extraneous details.\nGenerate an aesthetic response: encouraging people to engage with the data or question.\n\nGiven these characteristics, consider the data graphics below, which present an analysis of the 2016 US Presidential Election. Both maps use 2016 county-level results data, but the The Washington Post graphic encodes many more data items than the Medium post (see Table 3.1 below).\n\n\n\n\nFigure 3.1: Maps of 2016 US presidential election results. Left - two-colour choropleth in Medium. Right - information-rich data graphic in The Washington Post Note: RB to reproduce WP map for copyright reasons..\n\n\n\n\nIt is not simply the data density that makes the Washington Post graphic successful. The authors usefully incorporate annotations and transformations in order to support comparison and emphasise structure. By varying the height of triangles according to the number of votes cast, the thickness according to whether or not the result for Trump/Clinton was a landslide and rotating the scrollable map 90 degrees, the very obvious differences between metropolitan, densely populated coastal counties that voted emphatically for Clinton and the vast number of suburban, provincial town and rural counties (everywhere else) that voted Trump, are exposed.\n\n\n\n\n\n?(caption)\n\n\n\n\n\n\n\n\n\nTable 3.1: Data items encoded in the Washington Post and Medium articles.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nItem\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMeasurement level\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMedium\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWashington Post\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncounty location\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterval\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncounty result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNominal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstate result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNominal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncounty votes cast (~pop size)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncounty result margin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncounty result landslide\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNominal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.1 Grammar of Graphics\n\nData graphics visually display measured quantities by means of the combined use of points, lines, a coordinate system, numbers, symbols, words, shading, and color.\nTufte (1983)\n\nIn evidence in the Washington Post graphic is a judicious mapping of data to visuals, underpinned by a secure understanding of analysis context. This act of carefully considering how best to leverage visual systems given the available data and analysis priorities is key to designing effective data graphics.\nIn the late 1990s Leland Wilkinson, a Computer Scientist and Statistician, introduced the Grammar of Graphics (1999) as an approach that captures this process of turning data into visuals. Wilkinson (1999)’s thesis is that if graphics can be described in a consistent way according to their structure and composition, then the process of generating graphics of different types can be systematised. This has obvious benefits for building visualization toolkits: it makes it easy to specify chart types and combinations and helps formalise the process of designing data visualizations. Tableau, vega-lite and ggplot2 are all underpinned by Grammar of Graphics thinking.\nWilkinson (1999)’s grammar separates the construction of a data graphic into a series of components. Below are the components of the Layered Grammar of Graphics on which ggplot2 is based (Wickham 2010), a slight edit on Wilkinson (1999)’s original work.\n\n\n\n\nFigure 3.2: Components of Wickham (2010)’s Layered Grammar of Graphics.\n\n\n\n\nThe seven components in Figure 3.2 are together used to create ggplot2 specifications. The aspects to highlight at this stage are those in emphasis, which are required in any ggplot2 specification. The data containing the variables of interest, the geom or marks to be used to represent data and the aesthetic (mapping=aes(...)) attributes, or visual channels, through which variables are to be encoded.\nTo demonstrate this, let’s generate some scatterplots based on the 2019 General Election data we will be analysing later in the chapter. Two variables worth exploring for association here are: con_1719, the change in Conservative vote share by constituency between 2017-2019, and leave_hanretty, the size of the Leave vote in the 2016 EU referendum, estimated at Parliamentary Constituency level (see Hanretty 2017).\n\n\n\n\nFigure 3.3: Plots, grammars and underlying ggplot2 specifications for the scatterplot.\n\n\n\n\nIn Figure 3.3 are three plots and underlying ggplot2 specifications. Reading-off the graphics and the associated code, you should get a feel for how ggplot2 specifications are constructed:\n\nWe start with a data frame, in this case each observation is an electoral result for a Parliamentary Constituency. In the ggplot2 spec this is passed using the pipe operator (%>%). We also identify the variables to encode and their measurement type. Remembering the previous chapter, both con_1719 and leave_hanretty are ratio scale variables.\nNext is the encoding (mapping=aes()), which determines how the data are to be mapped to visual channels. A scatterplot is a 2D representation in which horizontal and vertical position varies in a meaningful way, in response to the values of a data set. Here the values of leave_hanretty are mapped along the x-axis and the values of con_1719 are mapped along the y-axis.\nFinally, we represent individual data items with marks using the geom_point geometry.\n\nIn the middle plot, the grammar is updated such that the points are coloured according to winning_party, a variable of type categorical nominal. In the bottom plot constituencies that flipped from Labour-to-Conservative between 2017-19 are emphasised by varying the transparency (alpha) of points. flipped is labelled an ordinal variable, but strictly it is a nominal (binary) variable. Due to the way it is encoded in the plot, constituencies that flipped are given greater visual emphasis and so is perhaps more appropriate to call flipped an ordinal variable.\n\n\n\n\n\n\nOn ggplot2 ‘specifications’\n\n\n\nIt is understandable if at this stage the specifications in Figure 3.3 still seem alien to you. We will be updating, expanding and refining ggplot2 specifications throughout this course to support all aspects of modern data analysis: from data cleaning and exploratory analysis through to model evaluation and communication.\n\n\n\n3.2.2 Marks and visual channels\n\nEffective data visualization design is concerned with representing data through marks and visual channels in a way that best conveys the properties of the data that are to be depicted.\nvia Jo Wood\n\nYou might have noticed that in our descriptions of ggplot2 specifications we introduced marks as another term for geometry and visual encoding channels as another term for aesthetics. We also paid special attention to the data types that are being encoded. Marks are graphical elements such as bars, lines, points, ellipses that can be used to represent data items. In ggplot2, these are accessed through the functions prefaced with geom_*. Visual channels are attributes such as colour, size, position that, when mapped to data, control the appearance of marks in response to the values of a dataset.\nMarks and channels are terms that appear in the interface of Tableau and in vega-lite specifications. They are also used widely in Information Visualization, an academic discipline devoted to the study of data graphics, and most notably by Tamara Munzner (2014) in her textbook Visualization Analysis and Design. Munzner (2014)’s work synthesises over foundational research in Information Visualization and Cognitive Science testing how effective different visual channels are at supporting different tasks.\n\n\n\n\nFigure 3.4: Visual channels to which data items can be encoded, as they appear in Munzner (2014).\n\n\n\n\nFigure 3.4 is taken from Munzner (2014) and lists the main visual channels with which data might be encoded. The grouping and order of the figure is meaningful. Channels are grouped according to the tasks to which they are best suited and then ordered according to their effectiveness at supporting those tasks. To the left are magnitude:order channels – those that are best suited to tasks aimed at quantifying data items. To the right are identity:category channels – those that are most suited to supporting tasks that involve isolating, grouping and associating data items.\nWe can use this organisation of visual channels to make decisions about appropriate encodings given a variable’s measurement level. If we wished to convey the magnitude of something, for example a quantitative (ratio) variable like the size of the Conservative vote share in a constituency, we might select a channel that has good quantitative effectiveness – position on a common scale or length. If we wished to also effectively identify and associate constituencies according to the political party that was elected, a categorical nominal variable, we might select a channel that has good associative properties such as colour hue.\n\n3.2.3 Evaluating designs\nThe effectiveness rankings of visual channels in Figure Figure 3.4 are not simply based on Munzner’s preference. They are informed by detailed experimental work – Cleveland and McGill (1984), later replicated by Heer and Bostock (2010) – which involved conducting controlled experiments testing people’s ability to make judgements from graphical elements. We can use Figure 3.4 to help make decisions around which data item to encode with which visual channel. This is particularly useful when designing data-rich graphics, where several data items are to be encoded simultaneously (e.g. Beecham et al. 2021). The figure also offers a low cost way of evaluating different designs against their encoding effectiveness.\n\n\n\n\n\n\nTable 3.2: Encoding effectiveness for Washington Post graphic that emphasises vote margin and size of counties using triangle marks.\n\n\n\nMark\n\n\nData item\n\n\nType\n\n\nChannel\n\n\nRank\n\n\n\n\n\nMagnitude:Order\n\n\n\n\n\n\n\n\n\nLocation\n\n\ninterval\n\n\nposition in x,y\n\n\nquant\n\n\n\n\n\n\n\n\n\n\nVotes cast (~pop size)\n\n\nratio\n\n\nlength\n\n\nquant\n\n\n\n\n\n\n\n\n\n\nMargin\n\n\nratio\n\n\nlength\n\n\nquant\n\n\n\n\n\n\n\n\n\n\nLandslide\n\n\nordinal\n\n\narea\n\n\nquant\n\n\n\n\n\nIdentity:Category\n\n\n\n\n\n\n\n\n\nWinner\n\n\nnominal\n\n\ncolour hue\n\n\ncat\n\n\n\n\n\n\n\n\n\n\n\nTo illustrate this, we can use Munzner’s ranking of channels to evaluate the Washington Post graphic discussed in Figure 3.1. Table 3.2 provides a summary of the encodings used in the graphic. US counties are represented using a peak-shaped mark. The key purpose of the graphic is to depict the geography of voting outcomes, and the most effective quantitative channel – position on an aligned scale – is used to order the county marks with a 2D geographic arrangement. With the positional channels taken, the two quantitive measures, votes cast and result margin, are encoded with the next highest ranked channel, 1D length: height varies according to number of votes cast and width according to result margin. The marks are additionally encoded with two categorical variables: whether the county-level result was a landslide and also the ultimate winner. Since the intention is to give greater visual saliency to counties that resulted in a landslide, this as an ordinal variable, encoded with a quantitative channel: 2D area. The winning party, a categorical nominal variable, is encoded using colour hue.\nEach of the encoding choices used in the graphic follow conventional wisdom in that data items are encoded using visual channels that are appropriate to their measurement level. Glancing down the “rank” column we can also argue that the graphic has high effectiveness. Whilst technically spatial region is the most effective channel for encoding nominal data, it is already in use in our graphic as the marks are arranged by geographic position. Additionally, it makes sense to distinguish Republican and Democrat wins using the colours with which they are always represented. Given the fact that the positional channels are in use to represent geographic location, length to represent votes cast and vote margin, the only superior visual channel to 2D area that could be used to encode the landslide variable is orientation. There are very good reasons for not varying the orientation of the arrow marks. Most obvious is that this would clearly undermine perception of length encodings used to represent the vote margin (width) and absolute vote size (height).\n\n\n\n\n\n\nVisualization design trade-offs\n\n\n\nData visualization design almost always involves trade-offs. When deciding on a design configuration, it is necessary to prioritise data and analysis tasks, then match representations and encodings that are most effective to the tasks that have the greatest priority. This constrains the encoding options for less important data items and tasks. Good visualization design is sensitive to this interplay between tasks, data and encoding.\n\n\n\n3.2.4 Symbolisation\n\nSymbolization is the process of encoding something with meaning in order to represent something else. Effective symbol design requires that the relationship between a symbol and the information that symbol represents (the referent) be clear and easily interpreted.\nWhite (2017)\n\nImplicit in the discussion above, and when making design decisions, is the importance of symbolisation. From the original Washington Post article, the overall pattern that can be discerned is of population-dense coastal and metropolitan counties voting Democrat – densely-packed, tall, wide and blue  marks – contrasted against population-sparse rural and small town areas voting Republican – short, wide and red  marks. The graphic evokes a distinctive landscape of voting behaviour, emphasised by its caption: “The peaks and valleys of Trump and Clinton’s support”.\nSymbolisation is used equally well in a variant of the graphic emphasising two-party Swing between the 2012 and 2016 elections [note: RB to reproduce this for copyright reasons]. Each county is represented as a | mark. The Swing variable is then encoded by continuously varying mark angles: counties swinging Republican are angled to the right /; counties swinging Democrat are angled to the left \\. Although angle is a less effective channel at encoding quantities than is length, there are obvious links to the political phenomena in the symbolisation – angled right for counties that moved to the right politically. Additionally, the variable itself might be regarded as cyclic – or at least it has a ceiling with an important mid-point that requires emphasis. It is worth taking a second look at the full graphic here. Since there is spatial autocorrelation in case trajectories, we quickly assemble from the graphic dominant patterns of Swing to the Republicans (Great Lakes, rural East Coast), predictable Republican stasis (the mid west) and to detect more isolated, locally exceptional Swings to the Democrats (rapidly urbanising counties in the deep south).\n[RB: remove section of perceptual rankings, detection and estimation?]\n\n3.2.5 Checking perceptual rankings\nWe mentioned that Munzner’s effectiveness ordering of visual channels is informed by empirical evidence – controlled experiments that examine perceptual abilities at making judgements from graphical primitives. It is worth elaborating a little on this experimental work, and on how established knowledge in Cognitive Science can be used to inform design choices.\nCleveland (1993) emphasises three perceptual activities that take place when we make sense of data graphics:\n\n\nDetection : the element of the graphic must be easily discernible.\n\nAssembly : the process of identifying patterns and structure within the graphical elements of the visualization.\n\nEstimation : the process of making comparisons of the magnitudes of data items from the visual elements used.\n\nThese activities can be related to the categories of task outlined earlier. Detection is especially important for selective and associative tasks that involve isolating and grouping data items, whilst estimation is necessary for tasks that are orderable and quantitative, involving the ranking and reading-off of quantities.\n\n3.2.6 Detection and preattentive processing\nA useful distinction when considering graphical cognition is between processes that are attentive and pre-attentive (Ware 2008). Attentive processing describes the conscious processing that happens when we attempt to make sense of a visual field. Preattentive processing happens unconsciously and is the type of cognitive processing that allows something to be understood ‘at a glance’. Visual items that immediately pop-out to us induce preattentive processing.\nThe ability to provoke pop-out – making some things on a data graphic more easily detectible than others – relates to detection. It can be useful for supporting selective and associative tasks, and so is often used in a data graphic to encode categorical variables. For example, in the Washington Post graphic the use of colour hue to differentiate and group together counties that voted Republican or Democrat. Preattentive processes can also apply to assembly. We naturally construct and assemble patterns that are smooth and continuous when perceiving a graphic and so deviations from this continuity are often attended to unconsciously. An example here would be those urbanising counties in the deep South, which were locally exceptional in swinging to Democrat (to the left).\nWe can test this preattentive processing by using visual encoding channels to assist a task that requires us to select and associate visual items. Below are a set of data graphics containing 200 numbers. For each graphic try to scan across the number, isolate or select the number 3, then group or associate the 3s together and count the number of instances that they occur. Speed is important here – so work as quickly as you can.\nFirst, a set of numbers without applying any special encoding to the number 3.\n\n\n\n\n\n\nTask: click to expose graphic, then count number of occurrences of #3\n\n\n\n\n\n\n\n\n\nEncoding: none.\n\n\n\n\n\n\n\nIf you were racing to complete the task, I imagine you found it moderately stressful. Let’s explore using visual encoding to off-load some of this cognitive effort. We’ll start with a visual channel that does not have particularly strong pre-attentive properties: area.\n\n\n\n\n\n\nTask: click to expose graphic, then count number of occurrences of #3\n\n\n\n\n\n\n\n\n\nEncoding: area.\n\n\n\n\n\n\n\nUsing visualization to support the task makes it an order of magnitude easier. But let’s explore some visual channels that have even more powerful properties. I mentioned that tilt/angle has preattentive properties where the data items to be emphasised deviate from some regular pattern. In the graphic below, the number 3 is encoded with tilt or angle.\n\n\n\n\n\n\nTask: click to expose graphic, then count number of occurrences of #3\n\n\n\n\n\n\n\n\n\nEncoding: tilt/angle.\n\n\n\n\n\n\n\nThis is in fact more challenging than the size encoding. I think this is most likely because the geometric patterns of the marks used (numbers) is being varied and so this limits the extent to which we unconsciously perceive smoothness and continuity (e.g. limits assembly).\nNext we’ll use a visual channel with known effectiveness at assisting select and associate tasks. Colour hue appears as the second-ranked most effective in Munzner (2014)’s ordering.\n\n\n\n\n\n\nTask: click to expose graphic, then count number of occurrences of #3\n\n\n\n\n\n\n\n\n\nEncoding: colour hue.\n\n\n\n\n\n\n\nFinally, though a slightly contrived example, we can use the top-ranked channel according to Munzner (2014): spatial region.\n\n\n\n\n\n\nTask: click to expose graphic, then count number of occurrences of #3\n\n\n\n\n\n\n\n\n\nEncoding: spatial region.\n\n\n\n\n\n\n\n\n3.2.7 Estimation\nThe informal tests above hopefully persuade you of Munzner (2014)’s ordering of identity:category channels in the right side of Figure 3.4. The ranking of magnitude:order channels is also informed by established theory and evidence.\nWhen using data graphics to communicate quantities, certain visual channels are known to induce biases. Psychophysics is a branch of psychology that develops methods aimed at capturing the often non-linear relationship between the properties of a stimuli such as symbol length, area or colour value, and their perceived response. Stevens’ power law is an empirically-derived relationship that models this effect. The power function takes the form:\nR=kS_n\nWhere S is the magnitude of the stimulus, for example, the absolute length of a line or area of a circle, R is the response, the perceived length and area, and _n is the power law exponent that varies with the type of stimulus. If there is a perfect linear mapping between the stimulus and response, _n is 1.\nStevens and Guirao (1963)’ experimental work involved varying the length of lines and areas of squares and deriving power functions for their perception. For length, an exponent of ~1.0 was estimated; for area an exponent of 0.7. So whilst variation in length is accurately perceived, we underestimate the size of areas as they increase. Flannery (1971)’s work, which was concerned with the perception of quantities in graduated point maps, estimated an exponent of 0.87 for the perception of circle size.\nExperimental findings vary and so these models of human perception are also subject to variation. Nevertheless, corrections can be applied. In cartography a Flannery compensation is used when representing quantities with area.\n\n\n\n\nDifferences in power law exponents for the perception of variation in length and area.\n\n\n\n\n\n\n\n\n\n\nGraphical perception of inference\n\n\n\nThis early experimental work that tries to understand how encoded quantities are perceived is clearly important. But we use data graphics to do much more than estimate single quantities. If data graphics are to serve as tools for analysis, we also need some confidence that the inferences made when studying data using graphics are accurate and reliable. In the Information Visualization domain, experimental work has recently been published exploring the perception of statistical quantities – location and dispersion (Correll and Gleicher 2014), correlation (Rensink and Baldridge 2010; Harrison et al. 2014; Kay and Heer 2016) and spatial autocorrelation (Klippel, Hardisty, and Li 2011; Beecham et al. 2017) – in commonly used chart types. More on this later.\n\n\n\n3.2.8 Colour\nAs demonstrated in the section on pre-attentive processing, colour is a very powerful visual channel. When considering how to encode data with colour, it is helpful to consider three properties:\n\n\nHue : what we generally refer to as “colour” in everyday life – red, blue green, etc.\n\nSaturation : how much of a colour there is.\n\nLuminance/Brightness : how dark or light a colour is.\n\nThe underlying rule when using colour in data graphics is to use properties of colour that match the properties of the data. Categorical nominal data – data that cannot be easily ordered – should be encoded using discrete colours with no obvious order: colour hue. Categorical ordinal data – data whose categories can be ordered – should be encoded with colours that contain an intrinsic order: saturation or brightness, usually allocated into gradients. Quantitative data – data that can be ordered and contain values on a continuous scale – should also be encoded with colours that contain an intrinsic order: saturation or brightness, expressed on a continuous scale.\nAs we will discover shortly, these principles are applied by default in ggplot2, along with access to perceptually uniform schemes. Its colorbrewer scales, for example.\n\n\n\n\n\n\nOn colour\n\n\n\nThere are many considerations when using colour to support visual data analysis and communication – and we will return to these at various points in the course. Lisa Charotte-Rost’s Guide to Colours in Data Visualization is an excellent summary of the decision-space."
  },
  {
    "objectID": "03-visual.html#sec-techniques",
    "href": "03-visual.html#sec-techniques",
    "title": "3  Visualization Fundamentals",
    "section": "\n3.3 Techniques",
    "text": "3.3 Techniques\nThe technical element involves analysing data from the 2019 UK General Election, reported by Parliamentary Constituency. After importing and describing the dataset, you will generate data graphics that expose patterns in voting behaviour. You will do so by writing ggplot2 specifications.\n\nDownload the 03-template.Rmd file for this session and save it to the reports folder of your vis4sds project.\nOpen your vis4sds project in RStudio and load the template file by clicking File > Open File ... > reports/03-template.Rmd.\n\n\n3.3.1 Import\nThe template file lists the required packages – tidyverse, sf and also parlitools. Installing parlitools brings down the 2019 UK General Election dataset, along with other constituency-level datasets. Loading it with library(parlitools) makes these data available to your R session.\nThe data frame containing 2019 UK General Election data is called bes_2019. This stores results data released by House of Commons Library. We can get a quick overview in the usual way – with a call to glimpse(<dataset-name>). The dataset’s variables are also described on the parlitools web pages. You will notice that bes_2019 contains 650 rows, one for each Parliamentary Constituency, and 118 columns. Contained in the columns are variables reporting vote numbers and shares for the main political parties for 2019 and 2017 General Elections, as well as names and codes (IDs) for each Parliamentary Constituency and the county, region and country in which they are contained. You might want to count the number of counties and regions in the UK, and the number of constituencies contained by counties and regions, using some of the dplyr functions introduced in the previous chapter – for example with calls to group_by() and count().\nThe aim of this analysis is to reinforce ggplot2 specifications. We will be replicating some of the visual data analysis of the 2019 UK General Election in Beecham (2020), inspired by the Washington Post graphic. For this we need to calculate an additional variable – Butler Swing (Butler and Van Beek 1990) – which represents the average change in share of the vote won by two parties contesting successive elections. Code for calculating this variable (named swing_con_lab) is in the 03-template.Rmd.\nAlthough initially intuitive, the measure takes a little interpretation. A Swing to the Conservatives, which we observe most often in this dataset, could happen in three ways:\n\nAn increase in Conservative vote share and a decrease in Labour vote share.\nAn increase in both Conservative and Labour vote share, but with the Conservative increase outstripping that of Labour’s.\nA decrease in both Conservative and Labour vote share, but with the Conservative decline being less severe than that of Labour’s.\n\nDifferent from the US where “third parties” play a negligible role, scenarios 2 and 3 do occur in the UK. You will notice that swing_con_lab is a signed value: positive indicates a Swing to Conservative, negative a Swing to Labour.\nThe only other dataset to load is a .geojson file containing the geometries of constituencies, collected originally from ONS Open Geography Portal and simplified using mapshaper. This is a special class of data frame containing a Simple Features geometry column.\n\n3.3.2 Summarise\nYou may be familiar with the result of the 2019 General Election – a landslide Conservative victory that confounded expectations. To start, we can quickly compute some summary statistics around the vote. In the code block below, we count the number of seats won by party and overall vote share by party. For the latter, the code is a little more elaborate than we might wish at this stage. We needed to reshape the data frame using pivot_wider() such that each row represents a vote for a party in a constituency. From here the vote share for each party can be easily computed.\nWhilst the Conservative party hold 56% of constituencies, they won only 44% of the vote share. The equivalent figures for Labour are 31% and 32% respectively. Incidentally, whilst the Conservatives increased their share of constituencies from 2017 (where they had just 317, 49% of constituencies) their vote share increase was reasonably small – in 2017 they gained 42.5% of the vote.\n\n# Number of constituencies won by party.\nbes_2019 %>%\n  group_by(winner_19) %>%\n  summarise(count=n()) %>%\n  arrange(desc(count))\n## # A tibble: 11 x 2\n##    winner_19                        count\n##    <chr>                            <int>\n##  1 Conservative                       365\n##  2 Labour                             202\n##  3 Scottish National Party             48\n##  4 Liberal Democrat                    11\n##  5 Democratic Unionist Party            8\n##  6 Sinn Fein                            7\n##  7 Plaid Cymru                          4\n##  8 Social Democratic & Labour Party     2\n##  9 Alliance                             1\n## 10 Green                                1\n## 11 Speaker                              1\n\n# Share of vote by party.\nbes_2019 %>%\n  select(constituency_name, total_vote_19, con_vote_19:alliance_vote_19, region) %>% # Select cols containing vote counts by party.\n  pivot_longer(cols=con_vote_19:alliance_vote_19, names_to=\"party\", values_to=\"votes\") %>% # Pivot to make each row a vote for a party in a constituency.\n  mutate(party=str_extract(party, \"[^_]+\")) %>% # Use some regex to pull out party name.\n  group_by(party) %>%\n  summarise(vote_share=sum(votes, na.rm=TRUE)/sum(total_vote_19)) %>%\n  arrange(desc(vote_share))\n\n## # A tibble: 12 x 2\n##    party    vote_share\n##    <chr>         <dbl>\n##  1 con         0.436\n##  2 lab         0.321\n##  3 ld          0.115\n##  4 snp         0.0388\n##  5 green       0.0270\n##  6 brexit      0.0201\n##  7 dup         0.00763\n##  8 sf          0.00568\n##  9 pc          0.00479\n## 10 alliance    0.00419\n## 11 sdlp        0.00371\n## 12 uup         0.00291\n\nBelow are some summary statistics computed over the newly created swing_con_lab variable. As the Conservative and Labour votes are negligible in Northern Ireland, it makes sense to focus on Great Britain for our analysis of Con-Lab Swing and so the first step in the code is to create a new data frame filtering out Northern Ireland.\n\ndata_gb <- bes_2019 %>%\n  filter(region != \"Northern Ireland\") %>%\n  mutate(\n    swing_con_lab=0.5*((con_19-con_17)-(lab_19-lab_17)),\n    # Recode to 0 Chorley incoming speaker,Buckingham outgoing speaker --  uncontested seat.\n    swing_con_lab=if_else(constituency_name %in% c(\"Chorley\", \"Buckingham\"),0,swing_con_lab)\n  )\n\ndata_gb %>%\n  summarise(\n    min_swing=min(swing_con_lab),\n    max_swing=max(swing_con_lab),\n    median_swing=median(swing_con_lab),\n    num_swing=sum(swing_con_lab>0),\n    num_landslide_con=sum(con_19>50, na.rm=TRUE),\n    num_landslide_lab=sum(lab_19>50, na.rm=TRUE)\n    )\n\n## # A tibble: 1 x 6\n##   min_swing max_swing median_swing num_swing num_landslide_con num_landslide_lab\n##       <dbl>     <dbl>        <dbl>     <int>             <int>             <int>\n## 1     -6.47      18.4         4.44       599               280               120\n\n\n3.3.3 Plot distributions\n\n\n\n\nHistograms of Swing variable.\n\n\n\n\nLet’s get going with some ggplot2 specifications by plotting some of these variables. Below is the code for plotting a histogram of the Swing variable.\n\ndata_gb %>%\n  ggplot(mapping=aes(swing_con_lab)) +\n  geom_histogram()\n\nA reminder of the general form of the ggplot2 specification:\n\nStart with some data: data_gb.\nDefine the encoding: mapping=aes(). In this case, we want to summarise over the swing_con_lab variable.\nSpecify the marks to be used: geom_histogram() in this case.\n\nDifferent from the scatterplot example, there is more happening in the internals of ggplot2 when creating a histogram. Technically geom_histogram() is what Munzner (2014) would describe as a chart idiom rather than a mark (geometric primitive). The Swing variable is partitioned into bins and observations in each bin are counted. The x-axis (bins) and y-axis (counts by bin) is therefore derived from the supplied variable (swing_con_lab). Should you wish, you could enter ?geom_histogram for fuller detail and documentation around controlling bin sizes amongst other things.\nYou will notice that by default the histogram’s bars are given a grey colour. To set them to a different colour, add a fill= argument to geom_histogram(). In the code block below, colour is set using hex codes – \"#003c8f\", based on the theme for this book. The term set and not map or encode is used for principled reasons. Any part of a ggplot2 specification that involves encoding data – mapping data to a visual channel – should be specified through the mapping=aes() argument. Anything else, for example changing the default colour of marks, their thickness and transparency, needs to be set outside of this argument.\n\ndata_gb %>%\n  ggplot(mapping=aes(swing_con_lab)) +\n  geom_histogram(fill=\"#003c8f\") +\n  labs(\n    title=\"Butler two-party Labour-Conservative Swing for Constituencies in GB\",\n    subtitle=\"-- 2019 versus 2017 election\",\n    caption=\"Data published by House of Commons Library, accessed via `parlitools`\",\n    x=\"Swing\", y=\"count\"\n  )\n\nYou might have noticed that different elements of a ggplot2 specification are added (+) as layers. In the example above, the additional layer of labels (labs()) is not intrinsic to the graphic. However, often you will add layers that do affect the graphic itself. For example, the scaling of encoded values (e.g. scale_*_continuous()) or whether the graphic is to be conditioned on another variable to generate small multiples for comparison (e.g. facet_*()).\n\n\n\n\n\n\nOn histograms\n\n\n\nRead this design exposition by Lunzner and McNamara, 2020 for an excellent discussion of the analysis and design considerations when working with histograms. There are of course other geoms for summarising over 1D distributions: geom_boxplot(), geom_dotplot(), geom_violin().\n\n\n\n3.3.3.1 Faceting by region\n\n\n\n\nFigure 3.5: Histograms of Swing variable, grouped by region.\n\n\n\n\nAdding a call to facet_*(), we can quickly compare how Swing varies by region (as in Figure 3.5). The plot is annotated with the median value for Swing (4.4) by adding a vertical line layer (geom_vline()) and setting its x-intercept at this value. From this, there is some evidence of a regional geography to the 2019 vote: London and Scotland are particularly distinctive in containing relatively few constituencies swinging greater than the expected midpoint; North East, Yorkshire & The Humber, and to a lesser extent West and East Midlands, appear to show the largest relative number of constituencies swinging greater than the midpoint. It was this graphic, especially the fact that London and Scotland look different from the rest of the country, that prompted the scatterplots in Figure 3.3 comparing gain in Conservative vote shares against the Brexit vote.\n\n3.3.4 Plot ranks/magnitudes\n\n\n\n\nFigure 3.6: Plots of vote shares by party.\n\n\n\n\nPreviously we calculated overall vote share by Political Party. We could continue the exploration of votes by region, re-using this code to generate plots displaying quantities but also comparing by region, using marks and encoding channels that are suitable for magnitudes.\nTo generate a bar chart similar to the left of Figure 3.6 the ggplot2 specification would be1:\n\ndata_gb %>%\n  # The code block summarising vote by party.\n  <some dplyr code> %>%\n  ...  %>% #\n  # Data frame of vote share by party, piped to ggplot2.\n  <summarised data frame>  %>%\n  # Ordinal x-axis (party, reordered), Ratio y-axis (vote_share).\n  ggplot(aes(x=reorder(party, -vote_share), y=vote_share)) +\n  # Set colour by website theme.\n  geom_col(fill=\"#003c8f\")\n\nA quick breakdown of the specification:\n\n\nData: This is the summarised data frame in which each row is a political party and the column describes the vote share recorded for that party.\n\nEncoding: We have dropped the call to mapping=. ggplot2 always looks for aes() and so can save some code clutter. In this case we are mapping party to the x-axis, a categorical variable made ordinal by the fact that we reorder the axis left-to-right descending according to vote_share. vote_share is mapped to the y-axis – so encoded using bar length, on an aligned scale, an effective channel for conveying magnitudes.\n\nMarks: geom_col() for generating the bars.\n\nSetting: Again, we’ve set bar colour according to the website theme and included titles and captions. Optionally we add a coord_flip() layer in order to display the bars horizontally. This makes the category axis labels easier to read and also seems more appropriate for the visual “ranking” of bars.\n\n\n\n\n\n\n\nggplot2 themes\n\n\n\nggplot2 themes control the appearance of all non-data items – font sizes and types, gridlines, axis labels. Checkout the complete list of ggplot2’s default themes. If you like the look of the BBC’s in-house data graphics, explore their Data Journalism cookbook. We’d recommend working through the cookbook as it is a great resource for distilling many of the non-data-related decisions that are made when communicating graphically.\n\n\n\n3.3.4.1 Faceting by region\n\n\n\n\nFigure 3.7: Plots of vote shares by party and region.\n\n\n\n\nIn Figure 3.7 the graphic is faceted by region. This requires an updated derived dataset grouping by vote_share and region and of course adding a faceting layer (geom_facet(~region)) to the ggplot2 specification2. The graphic is more data-rich, but additional cognitive effort is required in relating the bars representing political parties between different graphical subsets. We can assist this identify and associate task by encoding the bars with an appropriate visual channel: colour hue. The ggplot2 specification for this is as you would expect – we add a mapping to geom_col() and pass the variable name party to the fill argument (aes(fill=party)).\n\n<derived_data> %>%\n  ggplot(aes(x=reorder(party, vote_share), y=vote_share)) +\n  geom_col(aes(fill=party)) +\n  coord_flip() +\n  facet_wrap(~region)\n\nTrying this for yourself, you will observe that the ggplot2 internals are clever here. Since party is a categorical variable, a categorical (hue-based) colour scheme is automatically applied. Try passing a quantitative variable (fill=vote_share) and see what happens.\nClever as this is, when encoding political parties with colour symbolisation is important. More control over the encoding is necessary in order to specify the colours with which parties are most commonly represented. We can override ggplot2’s default colour by adding a scale_fill_manual() layer into which a vector of hex codes describing the colour of each political party is passed (party_colours). We also need to tell ggplot2 which element of party_colours to apply to which value of party. In the code below, a derived table is generated summarising vote_share by political party and region. In the final line the party variable is recoded as a factor. You might recall from the last chapter that factors are categorical variables of fixed and orderable values, called levels. The call to mutate() recodes party as a factor variable and orders the levels according to overall vote share.\n\n# Generate derived data.\ntemp_party_shares_region <- data_gb %>%\n  select(constituency_name, region, total_vote_19, con_vote_19:alliance_vote_19) %>%\n  pivot_longer(cols=con_vote_19:alliance_vote_19, names_to=\"party\", values_to=\"votes\") %>%\n  mutate(party=str_extract(party, \"[^_]+\")) %>%\n  group_by(party, region) %>%\n  summarise(vote_share=sum(votes, na.rm=TRUE)/sum(total_vote_19)) %>%\n  filter(party %in% c(\"con\", \"lab\", \"ld\", \"snp\", \"green\", \"brexit\", \"pc\")) %>%\n  mutate(party=factor(party, levels=c(\"con\", \"lab\", \"ld\", \"snp\", \"green\", \"brexit\", \"pc\")))\n\nNext, a vector of objects is created containing the hex codes for the colours of political parties (party_colours). This is a named vector, with names assigned from the levels of the party variable that was just created.\n\n# Define colours.\ncon <- \"#0575c9\"\nlab <- \"#ed1e0e\"\nld <- \"#fe8300\"\nsnp <- \"#ebc31c\"\ngreen <- \"#78c31e\"\npc <- \"#4e9f2f\"\nbrexit <- \"#25b6ce\"\nother <- \"#bdbdbd\"\n\nparty_colours <- c(con, lab, ld, snp, green, brexit, pc)\nnames(party_colours) <- levels(temp_party_shares_region %>% pull(party))\n\nThe ggplot2 specification is then updated with the scale_fill_manual() layer:\n\ntemp_party_shares_region %>%\n  ggplot(aes(x=reorder(party, vote_share), y=vote_share)) +\n  geom_col(aes(fill=party)) +\n  scale_fill_manual(values=party_colours) +\n  coord_flip() +\n  facet_wrap(~region)\n\n\n\n\n\n\n\nGrammar of Graphics-backed visualization toolkits\n\n\n\nThe idea behind visualization toolkits such as vega-lite, Tableau and ggplot2 is to insert visual data analysis approaches into the Data Scientist’s workflow. Rather than being overly concerned with low-level aspects of drawing, mapping to screen coordinates and scaling factors, the analyst instead focuses on aspects crucial to analysis – exposing patterns in the data by carefully specifying an encoding of data to visuals. Hadley Wickham talks about the type of workflow you will see used throughout this book – bits of dplyr to prepare data for charting before being piped (%>%) to a ggplot2 specification – as equivalent to a grammar of interactive graphics.\nThe process of searching for, defining and inserting manual colour schemes for creating Figure 3.7 might seem inimical to this. Indeed we were reluctant to include this code so early – there is some reasonably advanced dplyr and a little regular expression in the data preparation code that you should not be overly concerned with. However, having control of these slightly more low-level properties is sometimes necessary even for supporting exploratory analysis, in this case for enabling a symbolisation that is clear and easily interpretable. Try relating the bars without our manual setting of colours by political party – it certainly requires some mental gymnastics.\n\n\n\n3.3.5 Plot relationships\n\n\n\n\nFigure 3.8: Plots of 2019 versus 2017 vote shares.\n\n\n\n\nIn the Section 3.2.1 we demonstrated how scatterplots are specified in ggplot2. Scatterplots are useful examples for introducing ggplot2 specifications as they involve working with genuine mark primitives (geom_point()) and can be built up using a wide range of encoding channels.\nTo continue the investigation of change in vote shares for the major parties between 2017 and 2019, Figure @ref(fig:scatters-con) contains scatterplots of vote share in 2019 (y-axis) against vote share in 2017 (x-axis) for Conservative and Labour. The graphics are annotated with a diagonal line. If constituencies voted in 2019 in exactly the same way as 2017, the points would all converge on the diagonal, points above the diagonal indicate a larger vote share than 2017, those below the diagonal represent a smaller vote share than 2017. Points are coloured according to the winning party in 2019 and constituencies that flipped from Labour to Conservative are emphasised using transparency and shape.\nThe code for generating most of the scatterplot comparing Conservative vote shares is below.\n\ndata_gb %>%\n  mutate(winner_19=case_when(\n           winner_19 == \"Conservative\" ~ \"Conservative\",\n           winner_19 == \"Labour\" ~ \"Labour\",\n           TRUE ~ \"Other\"\n         )) %>%\n  ggplot(aes(x=con_17, y=con_19)) +\n  geom_point(aes(colour=winner_19), alpha=.8) +\n  geom_abline(intercept = 0, slope = 1) +\n  scale_colour_manual(values=c(con,lab,other)) +\n  ...\n\nHopefully there is little surprising here:\n\n\nData: The data_gb data frame. Values of winner_19 that are not Conservative or Labour are recoded to Other using a conditional statement. This is because points are eventually coloured according to winning party, but the occlusion of points adds visual complexity and so I’ve chosen to prioritise the two main parties and recode remaining parties to other.\n\nEncoding: Conservative vote share in 2017 and 2019 are mapped to the x- and y- axes respectively and winner_19 to colour. scale_colour_manual() is used for customising the colours.\n\nMarks: geom_point() for generating the points of the scatterplot; geom_abline() for drawing the reference diagonal.\n\n\n\n\n\n\n\nOn conditionals\n\n\n\nYou will have encountered conditionals in the reading from last session. case_when allows you to avoid writing multiple if_else() statements. It wasn’t really necessary here – I could have used a single if_else with something like:\ndata_gb %>%\n  mutate(\n    winner_19=if_else(!winner_19 %in% c(\"Conservative\", \"Labour\"), \"Other\", winner_19)\n  )\nA general point from the code blocks in this session is of the importance of proficiency in dplyr. Throughout the book you will find yourself needing to calculate new variables, recode variables, and reorganise data frames before passing through to ggplot2.\n\n\n\n3.3.6 Plot geography\n\n\n\n\nFigure 3.9: Choropleth of elected parties in 2019 General Election.\n\n\n\n\nIn the graphics that facet by region, our analysis suggests at a geography to voting and certainly to observed changes in voting comparing the 2017 and 2019 elections (e.g. Figure 3.5). We end the session by encoding the results data with a spatial arrangement – we’ll generate some maps.\nTo do this we need to define a join on the boundary data (cons_outline):\n\n# Join constituency boundaries.\ndata_gb <- cons_outline %>%\n  inner_join(data_gb, by=c(\"pcon19cd\"=\"ons_const_id\"))\n# Check class.\n## [1] \"sf\"         \"data.frame\"\n\nThe code for generating the Choropleth maps of winning party by constituency in Figure 3.9: ::: {.cell}\n# Recode winner_19 as a factor variable for assigning colours.\ndata_gb <- data_gb %>%\n  mutate(\n    winner_19=if_else(winner_19==\"Speaker\", \"Other\", winner_19),\n    winner_19=as_factor(winner_19))\n\n# Create a named vector of colours\nparty_colours <- c(con, lab, ld, green, other, snp, pc)\nnames(party_colours) <- levels(data_gb %>% pull(winner_19))\n\n# Plot map.\ndata_gb %>%\n  ggplot(aes(fill=winner_19)) +\n  geom_sf(colour=\"#eeeeee\", size=0.01)+\n  # Optionally add a layer for regional boundaries.\n  # geom_sf(data=. %>% group_by(region) %>% summarise(), colour=\"#eeeeee\", fill=\"transparent\", size=0.08)+\n  coord_sf(crs=27700, datum=NA) +\n  scale_fill_manual(values=party_colours)\n:::\nA breakdown of the ggplot2 spec:\n\n\nData: The dplyr code updates data_gb by recoding winner_19 as a factor and defining a named vector of colours to supply to scale_fill_manual().\n\nEncoding: No surprises here – fill according to winner_19.\n\nMarks: geom_sf() is a special class of geometry. It draws objects depending on the contents of the geometry column. In this case MULTIPOLYGON, so read this as a polygon geometric primitive.\n\nCoordinates: coord_sf – we set the coordinate system (CRS) explicitly. In this case OS British National Grid. More on this later in the course.\n\nSetting: I’ve subtly introduced light grey (colour=\"#eeeeee\") and thin (size=0.01) constituency boundaries to the geom_sf mark. On the map to the right outlines for regions are added as another geom_sf layer.\n\n\n\n\n\nFigure 3.10: Map of Butler Con-Lab Swing in 2019 General Election.\n\n\n\n\nThis has been a packed session. I’m providing a very abbreviated introduction to map design with ggplot2 and want to reserve the details of how ggplot2 can be used in more involved visualization design for later in the course. Since the graphic has been discussed at length, it would be strange not to demonstrate how the encoding in the Washington Post piece can be applied here to analyse our Butler two-party swing variable (e.g. Beecham 2020).\nFirst, some helper functions – converting degrees to radians and centring geom_spoke() geometries. Don’t bother yourself with these details, just run the code.\n\n# Convert degrees to radians.\nget_radians <- function(degrees) {\n  (degrees * pi) / (180)\n}\n# Rescaling function.\nmap_scale <- function(value, min1, max1, min2, max2) {\n  return  (min2+(max2-min2)*((value-min1)/(max1-min1)))\n}\n# Position subclass for centred geom_spoke.\n# As per https://bit.ly/3yfXdKJ.\nposition_center_spoke <- function() PositionCenterSpoke\nPositionCenterSpoke <-\n    ggplot2::ggproto('PositionCenterSpoke', ggplot2::Position,\n        compute_panel = function(self, data, params, scales)\n            {\n                data$x <- 2*data$x - data$xend\n                data$y <- 2*data$y - data$yend\n                data$radius <- 2*data$radius\n                data\n            }\n    )\n\nNext re-define party_colours, the object we use for manually setting colours, to contain just three values: hex codes for Conservative, Labour and Other.\n\nparty_colours <- c(con, lab, other)\nnames(party_colours) <- c(\"Conservative\", \"Labour\", \"Other\")\n\nAnd the ggplot2 specification:\n\nmax_shift <- max(abs(data_gb %>% pull(swing_con_lab)))\nmin_shift <- -max_shift\n\ngb <- data_gb %>%\n  mutate(\n    is_flipped=seat_change_1719 %in% c(\"Conservative gain from Labour\",\"Labour gain from Conservative\"),\n    elected=if_else(!winner_19 %in% c(\"Conservative\", \"Labour\"), \"Other\", as.character(winner_19))\n    ) %>%\n  ggplot()+\n  geom_sf(aes(fill=elected), colour=\"#636363\", alpha=.2, size=.01)+\n  geom_spoke(\n             aes(x=bng_e, y=bng_n, angle=get_radians(map_scale(swing_con_lab,min_shift,max_shift,135,45)), colour=elected, size=is_flipped),\n             radius=7000, position=\"center_spoke\"\n             )+\n  coord_sf(crs=27700, datum=NA)+\n  scale_size_ordinal(range=c(.3,.9))+\n  scale_colour_manual(values=party_colours)+\n  scale_fill_manual(values=party_colours)\n\nA breakdown:\n\n\nData: data_gb is updated with a boolean identifying whether or not the Constituency flipped Con-Lab/Lab-Con between successive elections (is_flipped), and a variable simplifying the party elected to either Conservative, Labour or Other.\n\nEncoding: geom_sf is again filled by elected party. This encoding is made more subtle by adding transparency (alpha=.2). geom_spoke() is a line primitive that can be encoded with a location and direction. It is mapped to the geographic centroid of each Constituency (bng_e - easting, bng_n - northing), coloured according to elected party, sized according to whether the Constituency flipped its vote and tilted according to the Swing variable. Here I’ve created a function (map_scale) which pegs the maximum Swing values in either direction to 45 degrees (max Swing to the right, Conservative) and 135 degrees (max Swing to the left, Labour).\n\nMarks: geom_sf() for the Constituency boundaries, geom_spoke() for the angled line primitives.\n\nScale: geom_spoke() primitives are sized to emphasise whether constituencies have flipped. The size encoding is censored to two values with scale_size_ordinal(). Passed to scale_colour_manual() and scale_fill_manual() is the vector of party_colours\n\n\nCoordinates: coord_sf – the CRS is OS British National Grid.\n\nSetting: The radius, the of geom_spoke() primitives is a sensible default arrived at through trial and error, its position set using our center_spoke class."
  },
  {
    "objectID": "03-visual.html#conclusions",
    "href": "03-visual.html#conclusions",
    "title": "3  Visualization Fundamentals",
    "section": "\n3.4 Conclusions",
    "text": "3.4 Conclusions\nVisualization design is ultimately a process of decision-making. Data must be filtered and prioritised before being encoded with marks, visual channels and symbolisation. The most successful data graphics are those that expose structure, connections and comparisons that could not be achieved easily via other, non-visual means. This session has introduced concepts – a vocabulary, framework and empirically-informed guidelines – that helps support this decision-making process and that underpins modern visualization toolkits (ggplot2 included). Through an analysis of UK 2019 General Election data, we have demonstrated how these concepts can be applied in a real data analysis."
  },
  {
    "objectID": "04-explore.html#concepts",
    "href": "04-explore.html#concepts",
    "title": "4  Exploratory Data Analysis",
    "section": "\n4.1 Concepts",
    "text": "4.1 Concepts"
  },
  {
    "objectID": "04-explore.html#techniques",
    "href": "04-explore.html#techniques",
    "title": "4  Exploratory Data Analysis",
    "section": "\n4.2 Techniques",
    "text": "4.2 Techniques"
  },
  {
    "objectID": "05-network.html#concepts",
    "href": "05-network.html#concepts",
    "title": "5  Networks",
    "section": "5.1 Concepts",
    "text": "5.1 Concepts"
  },
  {
    "objectID": "05-network.html#techniques",
    "href": "05-network.html#techniques",
    "title": "5  Networks",
    "section": "5.2 Techniques",
    "text": "5.2 Techniques"
  },
  {
    "objectID": "06-model.html#concepts",
    "href": "06-model.html#concepts",
    "title": "6  Models",
    "section": "6.1 Concepts",
    "text": "6.1 Concepts"
  },
  {
    "objectID": "06-model.html#techniques",
    "href": "06-model.html#techniques",
    "title": "6  Models",
    "section": "6.2 Techniques",
    "text": "6.2 Techniques"
  },
  {
    "objectID": "07-uncertainty.html#concepts",
    "href": "07-uncertainty.html#concepts",
    "title": "7  Uncertainty",
    "section": "7.1 Concepts",
    "text": "7.1 Concepts"
  },
  {
    "objectID": "07-uncertainty.html#techniques",
    "href": "07-uncertainty.html#techniques",
    "title": "7  Uncertainty",
    "section": "7.2 Techniques",
    "text": "7.2 Techniques"
  },
  {
    "objectID": "08-storytelling.html#concepts",
    "href": "08-storytelling.html#concepts",
    "title": "8  Data Storytelling",
    "section": "8.1 Concepts",
    "text": "8.1 Concepts"
  },
  {
    "objectID": "08-storytelling.html#techniques",
    "href": "08-storytelling.html#techniques",
    "title": "8  Data Storytelling",
    "section": "8.2 Techniques",
    "text": "8.2 Techniques"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References\n\nAnscombe, F. 1973. “Graphs in Statistical\nAnalysis.” American Statistician 27 (1):\n17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nArribas-Bel, D., and J. Reades. 2018. “Geography and Computers:\nPast, Present, and Future.” Geography\nCompass 12 (10): e12403. https://doi.org/10.1111/gec3.12403.\n\n\nBeecham, R. 2020. “Using Position, Angle and Thickness to Expose\nthe Shifting Geographies of the 2019 UK\nGeneral Election.” Environment and\nPlanning A: Economy and Space 52 (5): 833–36.\n\n\nBeecham, R., J. Dykes, L. Hama, and N. Lomax. 2021. “On the Use of\n‘Glyphmaps’ for Analysing the Scale and Temporal Spread of\nCOVID-19 Reported Cases.” ISPRS International Journal of\nGeo-Information 10 (4). https://doi.org/10.3390/ijgi10040213.\n\n\nBeecham, R., J. Dykes, W. Meulemans, A. Slingsby, C. Turkay, and J.\nWood. 2017. “Map Line-Ups: Effects of Spatial Structure on\nGraphical Inference.” IEEE Transactions on Visualization\n& Computer Graphics 23 (1): 391–400.\n\n\nBrunsdon, C., and A. Comber. 2020. “Opening Practice: Supporting\nReproducibility and Critical Spatial Data Science.” Journal\nof Geographical Systems.\n\n\nButler, D., and S. Van Beek. 1990. “Why Not Swing?\nMeasuring Electoral Change.” Political Science\n& Politics 23 (2): 178–84.\n\n\nCleveland, W. 1993. The Elements of\nGraphing Data. Hobart Press.\n\n\nCleveland, W., and R. McGill. 1984. “Graphical\nPerception: Theory,\nExperimentation, and Application to the\nDevelopment of Graphical\nMethods.” Journal of the American Statistical\nAssociation 79 (387): 531–54.\n\n\nCorrell, M., and M. Gleicher. 2014. “Error Bars\nConsidered Harmful: Exploring\nAlternate Encodings for Mean and\nError.” IEEE Transactions on Visualization and\nComputer Graphics 20 (12): 2142–51.\n\n\nDonoho, D. 2017. “50 Years of Data\nScience.” Journal of Computational and Graphical\nStatistics 26 (6): 745–66. https://doi.org/10.1080/10618600.2017.1384734.\n\n\nFlannery, J. J. 1971. “The Relative Effectiveness of Some Common\nGraduated Point Symbols in the Presentation of Quantitative\nData.” Cartographica 8 (2): 96–109.\n\n\nFriendly, M. 2007. “A Brief History of\nData Visualization.” In Handbook of\nComputational Statistics: Data\nVisualization, edited by C. Chen, W. Härdle, and A.\nUnwin, III:1–34. Heidelberg: Springer-Verlag. http://datavis.ca/papers/hbook.pdf.\n\n\nGleicher, Albers, M., and J. Roberts. 2011. “Visual Comparison for\nInformation Visualization. Information\nVisualization.” Information Visualization\n10 (4): 289–309.\n\n\nHanretty, C. 2017. “Areal Interpolation and the UK’s\nReferendum on EU Membership.” Journal of\nElections, Public Opinion and Parties 37 (4): 466–83.\n\n\nHarrison, L., F. Yang, S. Franconeri, and R. Chang. 2014. “Ranking\nVisualizations of Correlation Using Weber’s\nLaw.” IEEE Conference on Information\nVisualization (InfoVis) 20 (12): 1943–52.\n\n\nHealy, K. 2018. Data Visualization: A\nPractical Introduction. Princeton:\nPrinceton University Press.\n\n\nHeer, J., and M. Bostock. 2010. “Crowdsourcing\nGraphical Perception: Using\nMechanical Turk to Assess\nVisualization Design.” In\nACM Human Factors in\nComputing Systems, 203–12. https://doi.org/10.1145/1753326.1753357.\n\n\nKay, M., and J. Heer. 2016. “Beyond Weber’s\nLaw: A Second Look\nat Ranking Visualizations of\nCorrelation.” IEEE Trans. Visualization &\nComp. Graphics (InfoVis) 22 (1): 469–78.\n\n\nKlippel, A., F. Hardisty, and Rui. Li. 2011. “Interpreting\nSpatial Patterns: An\nInquiry Into Formal and\nCognitive Aspects of Tobler’s\nFirst Law of Geography.”\nAnnals of the Association of American Geographers 101 (5):\n1011–31.\n\n\nLovelace, R., R. Beecham, E. Heinen, E. Vidal Tortosa, Y. Yuanxuan, C.\nSlade, and A. Roberts. 2020. “Is the London\nCycle Hire Scheme Becoming More\nInclusive? An Evaluation of the Shifting Spatial\nDistribution of Uptake Based on 70 Million Trips.”\nTransportation Research Part A: Policy and Practice 140\n(October): 1–15.\n\n\nLovelace, R., J. Nowosad, and J. Muenchow. 2019. Geocomputation with\nR. London, UK: CRC Press.\n\n\nMatejka, J., and G. Fitzmaurice. 2017. “Same Stats,\nDifferent Graphs: Generating\nDatasets with Varied Appearance\nand Identical Statistics Through\nSimulated Annealing.” In, 1290–94.\nCHI ’17. New York, NY, USA: Association for Computing\nMachinery. https://doi.org/10.1145/3025453.3025912.\n\n\nMunzner, T. 2014. Visualization Analysis and\nDesign. AK Peters\nVisualization Series. Boca Raton, FL: CRC\nPress.\n\n\nOpen Science Collaboration. 2015. “Estimating the Reproducibility\nof Psychological Science.” Science 349 (6251): aac4716.\nhttps://doi.org/10.1126/science.aac4716.\n\n\nRensink, R., and G. Baldridge. 2010. “The Perception of\nCorrelation in Scatterplots.” Computer Graphics Forum 29\n(3): 1203–10.\n\n\nStevens, S. 1946. “On the Theory of Scales of Measurement.”\nScience 103 (2684): 677–80.\n\n\nStevens, S, and M. Guirao. 1963. “Subjective Scaling of Length and\nArea and the Matching of Length to Loudness and Brightness.”\nJournal of Experimental Psychology 66 (2): 177–86.\n\n\nTufte, E. 1983. The Visual Display of\nQuantitative Information. Cheshire, CT:\nGraphics Press.\n\n\nTukey, John W. 1962. “The Future of Data\nAnalysis.” The Annals of Mathematical Statistics\n33 (1): 1–67. https://doi.org/10.1214/aoms/1177704711.\n\n\nWare, C. 2008. Visual Thinking for\nDesign. Waltham, MA: Morgan Kaufman.\n\n\nWhite, T. 2017. “Symbolization and the Visual\nVariables.” In He Geographic\nInformation Science &\nTechnology Body of\nKnowledge, edited by John P. Wilson.\n\n\nWickham, H. 2010. “A Layered Grammar of Graphics.”\nJournal of Computational and Graphical Statistics 19 (1): 3–28.\n\n\n———. 2014. “Tidy Data.” Journal of\nStatistical Software 59 (10): 1–23.\n\n\nWickham, H., and G. Grolemund. 2017. R for Data\nScience: Import, Tidy,\nTransform, Visualize, and Model\nData. Sebastopol, California: O’Reilly Media.\n\n\nWilkinson, L. 1999. The Grammar of\nGraphics. New York: Springer."
  },
  {
    "objectID": "a1-data.html#introduction",
    "href": "a1-data.html#introduction",
    "title": "Appendix A — Data Fundamentals",
    "section": "\nA.1 Introduction",
    "text": "A.1 Introduction\nThis task requires you to apply the concepts and skills developed in the chapter on data fundamentals. Do complete each of the task components and be sure to save your work."
  },
  {
    "objectID": "a1-data.html#component-1-describe-data",
    "href": "a1-data.html#component-1-describe-data",
    "title": "Appendix A — Data Fundamentals",
    "section": "\nA.2 Component 1: Describe data",
    "text": "A.2 Component 1: Describe data\nComplete the data description table below identifying the measurement level of each variable in the (fictional) New York bikeshare stations dataset below.\n\n\nVariable name\nVariable value\nMeasurement level\n\n\n\nname\n“Central Park”\n\n\n\ncapacity\n80\n\n\n\nrank_capacity\n45\n\n\n\ndate_opened\n“2014-05-23”\n\n\n\nlongitude\n-74.00149746\n\n\n\nlatitude\n40.74177603"
  },
  {
    "objectID": "a1-data.html#component-2-diagnose-data",
    "href": "a1-data.html#component-2-diagnose-data",
    "title": "Appendix A — Data Fundamentals",
    "section": "\nA.3 Component 2: Diagnose data",
    "text": "A.3 Component 2: Diagnose data\nBelow are two different tables with results from UK General Elections. We will be working with these data in the next session. Identify whether or not each is in tidy format (Wickham 2014). If they are not, provide a layout for a tidy version. No need to use code here, just edit the markdown table. If you’re struggling to work out how to organise markdown tables, you may wish to use this tables generator.\n\nA.3.1 UK General Election Results 2019\n\n\nparty\npercent_vote\nnum_mps\n\n\n\nConservative\n43.6\n365\n\n\nLabour\n32.2\n202\n\n\nScottish National Party\n3.9\n48\n\n\nLiberal Democrats\n11.6\n11\n\n\nDemocratic Union Party\n0.8\n9\n\n\n\nA.3.2 UK General Election Results 2017 and 2019\n\n\n\n\n\n\n\n\n\nparty\npercent_vote_2017\nnum_mps_2017\npercent_vote_2019\nnum_mps_2019\n\n\n\nConservative\n42.4\n317\n43.6\n365\n\n\nLabour\n40.0\n262\n32.2\n202\n\n\nScottish National Party\n3.0\n35\n3.9\n48\n\n\nLiberal Democrats\n7.4\n12\n11.6\n11\n\n\nDemocratic Union Party\n0.9\n10\n0.8\n8"
  },
  {
    "objectID": "a1-data.html#component-3-fix-data",
    "href": "a1-data.html#component-3-fix-data",
    "title": "Appendix A — Data Fundamentals",
    "section": "\nA.4 Component 3: Fix data",
    "text": "A.4 Component 3: Fix data\nIn the 02-template.Rmd file for this session are links to two derived tables (ny_spread_columns and ny_spread_rows) from the New York bikeshare trip data that are not in a tidy format.\nUsing functions from dplyr and tidyr reorganise these data so that they conform to the rules of tidy data (Wickham 2014).\nA candidate tidy organisation of the data is below. Each row is an origin-destination pair for a weekday or weekend, and each variable describes:\n\n\no_station: station id of the origin station\n\nd_station: station id of the destination station\n\nwkday: identifies whether the OD pair describes weekday or weekend ny_trips\n\ncount: count of trips recorded for that observation (OD pair and weekday/weekend)\n\ndist: total distance (cumulative) in kms of all trips recorded for that observation (OD pair and weekday/weekend)\n\nduration: total duration in minutes (cumulative) of all trips recorded for that observation (OD pair and weekday/weekend)\n\n\n\n\n\n\n\nNote\n\n\n\nYou may wish to start with reorganising ny_spread_rows as I deliberately made ny_spread_columns quite challenging. The intention here was to replicate the sorts of arduous data formatting operations that need to be performed when working with real datasets. As always there are different approaches to this, but it can be achieved with use of pivot_longer, pivot_wider, plus a call to separate(). This may be one to post to the course Slack.\n\n\n\n## # A tibble: 386,762 x 6\n##    o_station d_station wkday   count  dist duration\n##        <int>     <int> <chr>   <int> <dbl>    <dbl>\n##  1        72       116 weekend     1  1.15     18.2\n##  2        72       127 weekend    10 18.0     339.\n##  3        72       128 weekend     2  3.18     69.6\n##  4        72       146 weekend    12 27.6     402.\n##  5        72       151 weekend     2  2.87     54.9\n##  6        72       161 weekend     2  2.52     64.8\n##  7        72       164 weekend     5 13.3      73.3\n##  8        72       167 weekend     1  2.07     17.2\n##  9        72       168 weekend     2  1.70     42.7\n## 10        72       173 weekend     9  9.59    194.\n## # … with 386,752 more rows"
  },
  {
    "objectID": "a1-data.html#component-4-compute-from-data",
    "href": "a1-data.html#component-4-compute-from-data",
    "title": "Appendix A — Data Fundamentals",
    "section": "\nA.5 Component 4: Compute from data",
    "text": "A.5 Component 4: Compute from data\nUsing dplyr functions, calculate the average distance, duration and speed of trips occurring for each observation. Print out to the Console the top 10 most heavily cycled OD pairs (and their associated summary statistics) separately for weekdays and weekends. You may wish to join on your ny_stations table in order to fetch the station names corresponding to the origin and destination stations."
  }
]